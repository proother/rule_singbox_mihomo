name: Build rules dat files (Mihomo Focus)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
          echo "CHINA_DOMAINS_URL=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Domain.txt" >> $GITHUB_ENV
          echo "GOOGLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "APPLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "CUSTOM_PROXY=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/geolocation-!cn.txt" >> $GITHUB_ENV
          echo "WIN_SPY=https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt" >> $GITHUB_ENV
          echo "WIN_UPDATE=https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/update.txt" >> $GITHUB_ENV
          echo "WIN_EXTRA=https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/extra.txt" >> $GITHUB_ENV

      - name: Checkout MetaCubeX/meta-rules-dat
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-dat
          path: meta-rules-dat

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: convert

      - name: Checkout cokebar/gfwlist2dnsmasq
        uses: actions/checkout@v4
        with:
          repository: cokebar/gfwlist2dnsmasq
          path: gfwlist2dnsmasq

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: ./custom/go.sum

      - name: Generate GFWList domains
        run: |
          cd gfwlist2dnsmasq || exit 1
          chmod +x ./gfwlist2dnsmasq.sh
          ./gfwlist2dnsmasq.sh -l -o ./temp-gfwlist.txt

      - name: Get and add direct domains into temp-direct.txt file
        run: |
          curl -sSL ${CHINA_DOMAINS_URL} | sed '/^\s*#/d' | sed '/^[^\.]/ s/^/full:/' |  sed 's/^\.\([^.]*\)/\1/' > temp-direct.txt

      - name: Get and add proxy domains into temp-proxy.txt file
        run: |
          cat ./gfwlist2dnsmasq/temp-gfwlist.txt | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' > temp-proxy.txt
          curl -sSL $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -sSL $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -sSL ${CUSTOM_PROXY} | grep -Ev ":@cn" | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> temp-proxy.txt

      - name: Reserve full, regexp and keyword type of rules from custom lists to reserve files
        run: |
          curl -sSL ${CUSTOM_PROXY} | grep -Ev ":@cn" | perl -ne '/^((full|regexp|keyword):[^:]+)(\n$|:@.+)/ && print "$1\n"' | sort --ignore-case -u > proxy-reserve.txt

      - name: Create resources directory
        run: |
          mkdir -p resouces
          touch resouces/proxy.txt
          touch resouces/direct.txt
          touch resouces/direct-need-to-remove.txt
          touch resouces/proxy-need-to-remove.txt

      - name: Create Python scripts
        run: |
          cat > find_redundant.py << 'PYEOF'
          import sys
          domains = set()
          with open(sys.argv[1], 'r') as f:
              for line in f:
                  domain = line.strip()
                  if domain:
                      domains.add(domain)
          redundant = set()
          domain_list = sorted(domains)
          for i, domain in enumerate(domain_list):
              for j, other_domain in enumerate(domain_list):
                  if i != j and domain.endswith('.' + other_domain):
                      redundant.add(domain)
          with open(sys.argv[2], 'w') as f:
              for domain in sorted(redundant):
                  f.write(domain + '\n')
          PYEOF
          
          cat > remove_from.py << 'PYEOF'
          import sys
          remove_domains = set()
          with open(sys.argv[1], 'r') as f:
              for line in f:
                  domain = line.strip()
                  if domain:
                      remove_domains.add(domain)
          with open(sys.argv[2], 'r') as f:
              with open(sys.argv[3], 'w') as out_f:
                  for line in f:
                      domain = line.strip()
                      if domain and domain not in remove_domains:
                          out_f.write(line)
          PYEOF

      - name: Add proxy, direct domains from resources
        run: |
          cat ./resouces/proxy.txt >> temp-proxy.txt 2>/dev/null || true
          cat ./resouces/direct.txt >> temp-direct.txt 2>/dev/null || true

      - name: Sort and generate redundant lists
        run: |
          cat temp-proxy.txt | sort --ignore-case -u > proxy-list-with-redundant
          cat temp-direct.txt | sort --ignore-case -u > direct-list-with-redundant

      - name: Remove redundant domains
        run: |
          python find_redundant.py ./direct-list-with-redundant ./direct-list-deleted-unsort
          python find_redundant.py ./proxy-list-with-redundant ./proxy-list-deleted-unsort
          [ ! -f "direct-list-deleted-unsort" ] && touch direct-list-deleted-unsort
          [ ! -f "proxy-list-deleted-unsort" ] && touch proxy-list-deleted-unsort
          sort ./direct-list-deleted-unsort > ./direct-list-deleted-sort
          sort ./proxy-list-deleted-unsort > ./proxy-list-deleted-sort
          python remove_from.py ./direct-list-deleted-sort ./direct-list-with-redundant direct-list-without-redundant
          python remove_from.py ./proxy-list-deleted-sort ./proxy-list-with-redundant proxy-list-without-redundant

      - name: Remove domains from need-to-remove lists
        run: |
          python remove_from.py ./resouces/direct-need-to-remove.txt ./direct-list-without-redundant ./temp-cn.txt
          python remove_from.py ./resouces/proxy-need-to-remove.txt ./proxy-list-without-redundant ./temp-geolocation-!cn.txt

      - name: Remove domains end with .cn and write lists to data directory
        run: |
          cat temp-cn.txt | grep -v google | grep -v manhua | grep -v ooklaserver | grep -v "acg.rip" | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' > ./community/data/cn
          cat temp-cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > direct-tld-list.txt
          cat temp-geolocation-!cn.txt | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' | perl -ne 'print if not /\.cn$/' > ./community/data/geolocation-!cn
          cat temp-geolocation-!cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > proxy-tld-list.txt

      - name: Add full, regexp and keyword type of rules back into cn and geolocation-!cn list
        run: |
          [ -f "direct-reserve.txt" ] && cat direct-reserve.txt >> ./community/data/cn
          [ -f "proxy-reserve.txt" ] && cat proxy-reserve.txt >> ./community/data/geolocation-!cn
          cp ./community/data/cn direct-list.txt
          cp ./community/data/geolocation-!cn proxy-list.txt

      - name: Create google-cn, apple-cn, gfw lists
        run: |
          curl -sSL $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "full:$1\n"' > ./community/data/google-cn
          curl -sSL $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "full:$1\n"' > ./community/data/apple-cn
          cat ./gfwlist2dnsmasq/temp-gfwlist.txt | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' >> ./community/data/gfw
          curl -sSL $WIN_SPY | grep "0.0.0.0" | awk '{print $2}' > ./community/data/win-spy
          curl -sSL $WIN_UPDATE | grep "0.0.0.0" | awk '{print $2}' > ./community/data/win-update
          curl -sSL $WIN_EXTRA | grep "0.0.0.0" | awk '{print $2}' > ./community/data/win-extra

      - name: merge ios_rule_script/SteamCN
        env:
          SED: sed '/^\s*#/d' | sed 's/DOMAIN,//g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g'
        run: |
          curl -sSL https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SteamCN/SteamCN.list | ${{ env.SED }} > steamcn.txt
          while read line; do grep -q "$line @cn" ./community/data/steam || sed -i "/$line/ s/$/ @cn/" ./community/data/steam; done < steamcn.txt 2>/dev/null || true
          cat ./community/data/steam 2>/dev/null || true

      - name: Add data for meta
        env:
          SED: sed '/^\s*#/d' | sed 's/^PROCESS-NAME,//' | sed 's/DOMAIN,/full:/g' | sed 's/DOMAIN-SUFFIX,//g' | sed 's/DOMAIN-KEYWORD,/keyword:/g' | sed '/^\s*IP-CIDR/d'
        run: |
          curl -sSL https://raw.githubusercontent.com/xishang0128/rules/main/biliintl.list > ./community/data/biliintl
          curl -sSL https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OneDrive/OneDrive.list | ${{ env.SED }} > ./community/data/onedrive
          echo "sharepoint.cn" >> ./community/data/onedrive
          curl -sSL https://raw.githubusercontent.com/xishang0128/rules/main/sharepoint.list > ./community/data/sharepoint
          curl -sSL https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PrivateTracker/PrivateTracker.list | ${{ env.SED }} > ./community/data/tracker
          curl -sSL https://gitea.com/XIU2/TrackersListCollection/raw/branch/master/all.txt | grep -i "\.[A-Z]" | grep -v tracker | sed 's/^.*\/\///g' | sed 's/:.*\/.*//g' >> ./community/data/tracker
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/BlockHttpDNS/BlockHttpDNS.list | ${{ env.SED }} > ./community/data/httpdns

      - name: Build geosite.dat file
        run: |
          cd custom || exit 1
          echo ipleak.net >> ../community/data/geolocation-!cn && echo browserleaks.org >> ../community/data/geolocation-!cn
          go run ./ --datapath=../community/data

      - name: Build geosite-lite.dat file
        env:
          NO_SKIP: true
          SED: grep DOMAIN | grep -v "#" | sed 's/  - DOMAIN,/full:/g' | sed 's/  - DOMAIN-SUFFIX,//g' | sed 's/  - DOMAIN-KEYWORD,/keyword:/g'
        run: |
          cd community || exit 1
          mkdir -p data-lite
          curl -sSL https://raw.githubusercontent.com/xishang0128/rules/main/biliintl.list > ./data-lite/biliintl
          curl -sSL https://github.com/v2fly/domain-list-community/raw/master/data/ehentai > ./data-lite/ehentai
          curl -sSL https://github.com/v2fly/domain-list-community/raw/master/data/private > ./data-lite/private

          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/AbemaTV/AbemaTV.yaml | ${{ env.SED }} > ./data-lite/abema
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Apple/Apple_Classical.yaml | ${{ env.SED }} > ./data-lite/apple
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/AppleMusic/AppleMusic.yaml | ${{ env.SED }} > ./data-lite/applemusic
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/BiliBili/BiliBili.yaml | ${{ env.SED }} > ./data-lite/bilibili
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Bahamut/Bahamut.yaml | ${{ env.SED }} > ./data-lite/bahamut

          curl -sSL https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China_Domain.yaml | grep - | sed "s/  - '+.//g" | sed "s/  - '/full:/g" | grep -v "#" | grep -v "acg.rip" | sed "s/'//g" > ./data-lite/cn
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Cloudflare/Cloudflare.yaml | ${{ env.SED }} > ./data-lite/cloudflare
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Google/Google.yaml | ${{ env.SED }} > ./data-lite/google
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/GitHub/GitHub.yaml | ${{ env.SED }} > ./data-lite/github
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Microsoft/Microsoft.yaml | ${{ env.SED }} > ./data-lite/microsoft
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Netflix/Netflix.yaml | ${{ env.SED }} > ./data-lite/netflix
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/OpenAI/OpenAI.yaml | ${{ env.SED }} > ./data-lite/openai
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/OneDrive/OneDrive.yaml | ${{ env.SED }} > ./data-lite/onedrive
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Pixiv/Pixiv.yaml | ${{ env.SED }} > ./data-lite/pixiv
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/ProxyLite/ProxyLite.yaml | ${{ env.SED }} > ./data-lite/proxy
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Spotify/Spotify.yaml | ${{ env.SED }} > ./data-lite/spotify
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Telegram/Telegram.yaml | ${{ env.SED }} > ./data-lite/telegram
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Twitter/Twitter.yaml | ${{ env.SED }} > ./data-lite/twitter
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/TikTok/TikTok.yaml | ${{ env.SED }} > ./data-lite/tiktok
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/YouTube/YouTube.yaml | ${{ env.SED }} > ./data-lite/youtube
          curl -sSL https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/GlobalMedia/GlobalMedia.yaml | ${{ env.SED }} > ./data-lite/proxymedia

          echo include:google >> ./data-lite/proxy && echo include:github >> ./data-lite/proxy && echo include:netflix >> ./data-lite/proxy
          echo ipleak.net >> ./data-lite/proxy && echo browserleaks.org >> ./data-lite/proxy
          echo "full:o33249.ingest.sentry.io" >>  ./data-lite/openai
          echo "openai.com" >> ./data-lite/openai
          go run ./ --datapath=./data-lite --outputname geosite-lite.dat

      - name: Get geoip.dat relative files
        run: |
          wget -O geoip-lite.dat https://github.com/xishang0128/geoip/raw/release/geoip.dat
          wget https://github.com/Loyalsoldier/geoip/raw/release/geoip.dat

      - name: Build db and metadb file
        env:
          NO_SKIP: true
        run: |
          go install -trimpath -ldflags="-s -w -buildid=" github.com/metacubex/geo/cmd/geo@master
          geo convert site -i v2ray -o sing -f geosite.db ./custom/publish/geosite.dat
          geo convert site -i v2ray -o sing -f geosite-lite.db ./community/geosite-lite.dat
          geo convert ip -i v2ray -o sing -f geoip.db ./geoip.dat
          geo convert ip -i v2ray -o meta -f geoip.metadb ./geoip.dat
          geo convert ip -i v2ray -o sing -f geoip-lite.db ./geoip-lite.dat
          geo convert ip -i v2ray -o meta -f geoip-lite.metadb ./geoip-lite.dat

      - name: Convert geo to meta-rule-set (YAML + LIST + MRS)
        env:
          NO_SKIP: true
        run: |
          echo "=== Converting geosite.dat to mihomo rule formats ==="
          mkdir -p meta-rule
          cd convert
          
          # Build meta-converter
          go build -o meta-converter .
          
          # Convert geosite.dat to mihomo YAML format
          echo "=== Converting to YAML format ==="
          ./meta-converter geosite -f ../custom/publish/geosite.dat -o ../meta-rule-yaml
          
          # Move YAML files to meta-rule directory
          for yaml_dir in ../meta-rule-yaml/*/; do
            if [[ -d "$yaml_dir" ]]; then
              dir_name=$(basename "$yaml_dir")
              if [[ -f "$yaml_dir/classical.yaml" ]]; then
                mv "$yaml_dir/classical.yaml" "../meta-rule/${dir_name}.yaml"
                echo "✅ Created ${dir_name}.yaml"
              fi
            fi
          done
          
          # Convert YAML to LIST format for better performance
          echo "=== Converting YAML to LIST format ==="
          for yaml_file in ../meta-rule/*.yaml; do
            if [[ -f "$yaml_file" ]]; then
              filename=$(basename "$yaml_file" .yaml)
              list_file="../meta-rule/${filename}.list"
              
              # Extract payload content and convert to list format
              if grep -q "payload:" "$yaml_file"; then
                tail -n +2 "$yaml_file" | sed 's/^[[:space:]]*-\s*//g' | grep -v '^$' > "$list_file"
                echo "✅ Created ${filename}.list"
              fi
            fi
          done
          
          # Try to generate MRS format (experimental)
          echo "=== Attempting MRS generation ==="
          if ./meta-converter geosite --help 2>&1 | grep -q "mrs\|binary"; then
            echo "Attempting to generate MRS files..."
            ./meta-converter geosite -f ../custom/publish/geosite.dat -o ../meta-rule-mrs -t mrs 2>/dev/null || true
            
            # Move MRS files if generated
            if [[ -d "../meta-rule-mrs" ]]; then
              for mrs_file in ../meta-rule-mrs/*.mrs; do
                if [[ -f "$mrs_file" ]]; then
                  filename=$(basename "$mrs_file")
                  mv "$mrs_file" "../meta-rule/$filename"
                  echo "✅ Created $filename"
                fi
              done
            fi
          else
            echo "MRS generation not supported by current meta-converter version"
          fi
          
          cd ..
          
          # Clean up temporary directories
          rm -rf meta-rule-yaml meta-rule-mrs
          
          echo "=== Meta-rule generation complete ==="
          echo "Files generated:"
          ls -al meta-rule/ | grep -E '\.(yaml|list|mrs)$' | wc -l
          echo "YAML files: $(find meta-rule -name "*.yaml" | wc -l)"
          echo "LIST files: $(find meta-rule -name "*.list" | wc -l)"
          echo "MRS files: $(find meta-rule -name "*.mrs" | wc -l)"

      - name: Prepare publish artifacts
        run: |
          echo "=== Collecting final artifacts into ./publish/ ==="
          mkdir -p publish

          # Move meta-rule into publish/
          cp -r meta-rule publish/meta-rule
          echo "=== meta-rule file count: $(find meta-rule -type f | wc -l) ==="
          ls -R publish

      - name: Create ZIP archives
        run: |
          echo "=== Creating ZIP archives ==="
          mkdir -p release-assets
          
          # Meta rules
          echo "=== Zipping meta rules ==="
          cd meta-rule
          if ls *.list 1> /dev/null 2>&1; then
            zip ../release-assets/meta-rules-list.zip *.list
            echo "✅ Created meta-rules-list.zip (3x faster loading)"
          fi
          if ls *.yaml 1> /dev/null 2>&1; then
            zip ../release-assets/meta-rules-yaml.zip *.yaml
            echo "✅ Created meta-rules-yaml.zip (mihomo default format)"
          fi
          if ls *.mrs 1> /dev/null 2>&1; then
            zip ../release-assets/meta-rules-mrs.zip *.mrs
            echo "✅ Created meta-rules-mrs.zip (mihomo binary format)"
          else
            echo "⚠️  No MRS files found - skipping MRS package"
          fi
          cd ..
          
          echo "=== Release assets created ==="
          ls -al release-assets/

      - name: Create GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: Mihomo Rules Release ${{ env.BUILDTIME }}
          tag: v${{ env.TAG_NAME }}-meta
          file_glob: true
          overwrite: true
          body: |
            ## 📦 Mihomo Rule Packages

            ### Meta Rules (Mihomo Compatible)
            - `meta-rules-yaml.zip` - Meta rule files (.yaml) - **Mihomo default format**
            - `meta-rules-list.zip` - Meta rule files (.list) - **3x faster loading**
            - `meta-rules-mrs.zip` - Meta rule files (.mrs) - **Binary format, maximum performance**

            ### 🎯 专注 Mihomo

            此版本专注于 **Mihomo 规则生成**，使用官方方法：
            - 📊 权威数据源：GFWList + China domains + 多源整合 (~30k 规则)
            - 🧹 智能去重：冗余清理 + 域名优化
            - 🌐 完整生态：与 MetaCubeX 100% 兼容
            - 🚀 多种格式：YAML + LIST + MRS

            ### 📊 格式对比

            | 格式 | 用途 | 性能特点 |
            |------|------|----------|
            | YAML | 默认格式 | 📖 兼容性最佳，可读性好 |
            | LIST | 性能优化 | ⚡ 加载速度提升 3倍 |
            | MRS | 极致性能 | 🚀 二进制格式，最高性能 |

            ### 📁 目录结构
            ```
            publish/
            └── meta-rule/          # Mihomo 规则
                ├── *.yaml         # YAML 格式 (默认)
                ├── *.list         # LIST 格式 (性能优化)
                └── *.mrs          # MRS 格式 (实验性)
            ```

            ### 🌐 数据源

            - **GFWList**: 最新防火墙域名列表
            - **China Domains**: 国内服务商域名
            - **Apple/Google CN**: 中国区特殊域名
            - **Windows Spy/Update**: 系统相关域名
            - **Custom Lists**: 社区维护的优质列表

            ### 🔄 处理流程

            1. 多源数据收集和整合
            2. 智能去重和冗余清理  
            3. 域名验证和格式转换
            4. 生成 geosite.dat 数据库
            5. 转换为 Mihomo 兼容格式
          file: release-assets/*.zip 