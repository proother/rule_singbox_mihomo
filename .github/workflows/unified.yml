# Unified workflow placeholder

name: Unified Rules Builder (Parallel Jobs)

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'  # 北京时间 20:00

permissions:
  contents: write

env:
  GOAMD64: v3
  BUILDTIME: ${{ github.run_id }}
  TAG_NAME: ${{ github.run_id }}

jobs:
  # Job 1: Generate Sing-box Rules (Parallel)
  sing-box-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: current-repo

      - name: Setup sing-box
        env:
          SING_BOX_DEB_URL: "https://github.com/SagerNet/sing-box/releases/download/v1.10.0-beta.5/sing-box_1.10.0-beta.5_linux_amd64.deb"
        run: |
          set -Eeuo pipefail
          wget -O sing-box.deb $SING_BOX_DEB_URL
          sudo dpkg -i sing-box.deb
          rm sing-box.deb

      - name: Clone blackmatrix7 repository
        run: |
          echo "📥 Cloning blackmatrix7/ios_rule_script repository..."
          git clone https://github.com/blackmatrix7/ios_rule_script.git temp-ios-rule-script
          echo "✅ Repository cloned successfully"

      - name: Copy optimal integration script
        run: |
          # Copy our optimal integration script
          cp current-repo/optimal_integration_fixed_v9.py ./
          cp current-repo/requirements.txt ./
          
          # Modify the output directory from rule to sing-rule in the script
          sed -i "s|os.path.join(current_dir, 'rule')|os.path.join(current_dir, 'sing-rule')|g" optimal_integration_fixed_v9.py
          sed -i "s|'rule'|'sing-rule'|g" optimal_integration_fixed_v9.py

      - name: Setup Python environment
        run: |
          set -Eeuo pipefail
          python3 -m venv venv
          source venv/bin/activate
          pip3 install -r requirements.txt
          # Install additional dependencies
          pip3 install PyYAML

      - name: Generate sing-box rules using optimal integration
        run: |
          echo "🎯 GENERATING SING-BOX RULES (Optimal Integration Method)"
          set -Eeuo pipefail
          source venv/bin/activate
          python3 optimal_integration_fixed_v9.py
          
          echo "📊 Generated files:"
          echo "   JSON files: $(find sing-rule -name "*.json" | wc -l)"

      - name: Compile sing-box rules to SRS format
        run: |
          echo "🔄 Compiling sing-box rules to SRS format..."
          cd sing-rule
          
          # Compile all JSON files to SRS format
          for json_file in *.json; do
            if [[ -f "$json_file" ]]; then
              filename=$(basename "$json_file" .json)
              echo "   Compiling: $filename"
              sing-box rule-set compile --output "${filename}.srs" "$json_file"
            fi
          done
          
          cd ..
          
          echo "📊 Compiled files:"
          echo "   SRS files: $(find sing-rule -name "*.srs" | wc -l)"

      - name: Create lite rules
        run: |
          echo "🔧 Creating Lite rules (IP-CIDR + DOMAIN only)..."
          mkdir -p sing-rule-lite
          sudo apt-get update && sudo apt-get install -y jq
          
          # Copy complete rules and filter
          for json_file in sing-rule/*.json; do
            if [[ -f "$json_file" ]]; then
              filename=$(basename "$json_file" .json)
              echo "   Processing: $filename"
              
              # Extract rules containing only ip_cidr and domain
              jq '{version: .version, rules: [.rules[] | with_entries(select(.key == "ip_cidr" or .key == "domain" or .key == "domain_suffix")) | select(. != {})]}' "$json_file" > "sing-rule-lite/${filename}.json"
              
              # Check if there are valid rules
              rule_count=$(jq '[.rules[]? | length] | add // 0' "sing-rule-lite/${filename}.json")
              if [[ "$rule_count" -eq 0 ]]; then
                echo "   ❌ Removed empty: $filename (0 rules)"
                rm "sing-rule-lite/${filename}.json"
              else
                echo "   ✅ Created: $filename ($rule_count rules)"
                
                # If corresponding SRS file exists, also copy one for subsequent processing
                if [[ -f "sing-rule/${filename}.srs" ]]; then
                  cp "sing-rule/${filename}.srs" "sing-rule-lite/${filename}_temp.srs"
                fi
              fi
            fi
          done
          
          # Recompile SRS for lite version
          cd sing-rule-lite
          for json_file in *.json; do
            if [[ -f "$json_file" ]]; then
              filename=$(basename "$json_file" .json)
              sing-box rule-set compile --output "${filename}.srs" "$json_file"
              echo "   ✅ Compiled lite SRS: $filename"
            fi
          done
          
          # Clean up temporary files
          rm -f *_temp.srs
          cd ..
          
          echo "🎉 Lite rules creation complete:"
          echo "   📄 Lite JSON files: $(find sing-rule-lite -name "*.json" | wc -l)"
          echo "   📄 Lite SRS files: $(find sing-rule-lite -name "*.srs" | wc -l)"

      - name: Upload sing-box artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sing-box-rules
          path: |
            sing-rule/
            sing-rule-lite/

  # Job 2: Generate Mihomo Rules (Official MetaCubeX Method)
  mihomo-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
          echo "CHINA_DOMAINS_URL=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Domain.txt" >> $GITHUB_ENV
          echo "GOOGLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "APPLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "CUSTOM_PROXY=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/geolocation-!cn.txt" >> $GITHUB_ENV
        shell: bash

      - name: Checkout MetaCubeX/meta-rules-dat (Official)
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-dat

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: convert

      - name: Checkout cokebar/gfwlist2dnsmasq
        uses: actions/checkout@v4
        with:
          repository: cokebar/gfwlist2dnsmasq
          path: gfwlist2dnsmasq

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: ./custom/go.sum

      - name: Generate GFWList domains
        run: |
          echo "🛡️ GENERATING MIHOMO RULES (Official MetaCubeX Method)"
          cd gfwlist2dnsmasq || exit 1
          chmod +x ./gfwlist2dnsmasq.sh
          ./gfwlist2dnsmasq.sh -l -o ./temp-gfwlist.txt

      - name: Get and add direct domains into temp-direct.txt file
        run: |
          curl -sSL ${CHINA_DOMAINS_URL} | sed '/^\s*#/d' | sed '/^[^\.]/ s/^/full:/' |  sed 's/^\.\([^.]*\)/\1/' > temp-direct.txt 

      - name: Get and add proxy domains into temp-proxy.txt file
        run: |
          cat ./gfwlist2dnsmasq/temp-gfwlist.txt | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' > temp-proxy.txt
          curl -sSL $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -sSL $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -sSL ${CUSTOM_PROXY} | grep -Ev ":@cn" | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> temp-proxy.txt

      - name: Reserve `full`, `regexp` and `keyword` type of rules from custom lists to "reserve" files
        run: |
          curl -sSL ${CUSTOM_PROXY} | grep -Ev ":@cn" | perl -ne '/^((full|regexp|keyword):[^:]+)(\n$|:@.+)/ && print "$1\n"' | sort --ignore-case -u > proxy-reserve.txt
          
      - name: Add proxy, direct and reject domains from "hidden" branch to appropriate temp files
        run: |
          cat ./resouces/proxy.txt >> temp-proxy.txt
          cat ./resouces/direct.txt >> temp-direct.txt

      - name: Sort and generate redundant lists
        run: |
          cat temp-proxy.txt | sort --ignore-case -u > proxy-list-with-redundant
          cat temp-direct.txt | sort --ignore-case -u > direct-list-with-redundant

      - name: Remove redundant domains (Official Method)
        run: |
          echo "🔧 Using Official MetaCubeX redundancy removal..."
          chmod +x ./resouces/*.py
          python ./resouces/findRedundantDomain.py ./direct-list-with-redundant ./direct-list-deleted-unsort
          python ./resouces/findRedundantDomain.py ./proxy-list-with-redundant ./proxy-list-deleted-unsort
          [ ! -f "direct-list-deleted-unsort" ] && touch direct-list-deleted-unsort
          [ ! -f "proxy-list-deleted-unsort" ] && touch proxy-list-deleted-unsort
          sort ./direct-list-deleted-unsort > ./direct-list-deleted-sort
          sort ./proxy-list-deleted-unsort > ./proxy-list-deleted-sort
          python ./resouces/removeFrom.py -remove ./direct-list-deleted-sort -from ./direct-list-with-redundant -out direct-list-without-redundant
          python ./resouces/removeFrom.py -remove ./proxy-list-deleted-sort -from ./proxy-list-with-redundant -out proxy-list-without-redundant

      - name: Remove domains from "need-to-remove" lists in "hidden" branch
        run: |
          python ./resouces/removeFrom.py -remove ./resouces/direct-need-to-remove.txt -from ./direct-list-without-redundant -out ./temp-cn.txt
          python ./resouces/removeFrom.py -remove ./resouces/proxy-need-to-remove.txt -from ./proxy-list-without-redundant -out ./temp-geolocation-\!cn.txt

      - name: Remove domains end with ".cn" in "temp-geolocation-!cn.txt" and write lists to data directory
        run: |
          cat temp-cn.txt | grep -v google | grep -v manhua | grep -v ooklaserver | grep -v "acg.rip" | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' > ./community/data/cn
          cat temp-cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > direct-tld-list.txt
          cat temp-geolocation-\!cn.txt | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' | perl -ne 'print if not /\.cn$/' > ./community/data/geolocation-\!cn
          cat temp-geolocation-\!cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > proxy-tld-list.txt

      - name: Add `full`, `regexp` and `keyword` type of rules back into "cn", and "geolocation-!cn" list
        run: |
          [ -f "direct-reserve.txt" ] && cat direct-reserve.txt >> ./community/data/cn
          [ -f "proxy-reserve.txt" ] && cat proxy-reserve.txt >> ./community/data/geolocation-\!cn
          cp ./community/data/cn direct-list.txt
          cp ./community/data/geolocation-\!cn proxy-list.txt

      - name: Build geosite.dat file
        run: |
          cd custom || exit 1
          echo ipleak.net >> ../community/data/geolocation-\!cn && echo browserleaks.org >> ../community/data/geolocation-\!cn
          go run ./ --datapath=../community/data

      - name: Convert geo to meta-rule-set
        env:
          NO_SKIP: true
        run: |
          mkdir -p meta-rule/geo/geosite && mkdir -p meta-rule/geo/geoip
          cd convert
          go run ./ geosite -f ../custom/publish/geosite.dat -o ../meta-rule/geo/geosite
          
          echo "✅ Meta rules generated:"
          echo "   YAML files: $(find ../meta-rule -name "*.yaml" | wc -l)"
          echo "   LIST files: $(find ../meta-rule -name "*.list" | wc -l)"
          echo "   MRS files: $(find ../meta-rule -name "*.mrs" | wc -l)"

      - name: Upload mihomo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mihomo-rules
          path: meta-rule/

  # Job 3: Generate GeoIP Rules (Parallel)
  geoip-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.22

      - name: Install dependencies
        run: |
          echo "📦 Installing GeoIP generator dependencies..."
          go mod download
          go mod tidy

      - name: Build geoip rule sets
        id: build
        run: |
          echo "🌍 GENERATING GEOIP RULE SETS"
          go run -v geoip_generator.go
          
          echo "📊 Generated GeoIP files:"
          if [ -d "release/sing-geoip" ]; then
            echo "   SRS files: $(find release/sing-geoip -name "*.srs" | wc -l)"
            ls -la release/sing-geoip/*.srs | head -10
            echo "   ..."
          else
            echo "   ❌ No GeoIP files generated"
          fi
        env:
          FIXED_RELEASE: ${{ github.event.inputs.tag }}
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload geoip artifacts
        uses: actions/upload-artifact@v4
        with:
          name: geoip-rules
          path: release/sing-geoip/

  # Job 4: Publish (Sequential - waits for all three parallel jobs)
  publish:
    runs-on: ubuntu-latest
    needs: [sing-box-rules, mihomo-rules, geoip-rules]
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Download sing-box artifacts
        uses: actions/download-artifact@v4
        with:
          name: sing-box-rules
          path: ./

      - name: Download mihomo artifacts
        uses: actions/download-artifact@v4
        with:
          name: mihomo-rules
          path: ./

      - name: Download geoip artifacts
        uses: actions/download-artifact@v4
        with:
          name: geoip-rules
          path: ./release/sing-geoip

      - name: Prepare publish artifacts
        run: |
          echo "📦 PREPARING UNIFIED PUBLISH"
          mkdir -p publish
          cp -r sing-rule publish/sing-rule
          cp -r sing-rule-lite publish/sing-rule-lite
          
          # Copy GeoIP rules
          if [ -d "release/sing-geoip" ]; then
            cp -r release/sing-geoip publish/sing-geoip
            echo "✅ Copied GeoIP rules: $(find publish/sing-geoip -name "*.srs" | wc -l) files"
          else
            echo "⚠️ No GeoIP rules found"
          fi
          
          echo "🔍 Debug: Checking directory structure after artifact download..."
          echo "📂 Root directory contents:"
          ls -la
          echo ""
          
          echo "📂 Looking for possible mihomo artifact locations:"
          echo "   Checking ./meta-rule:"
          ls -la meta-rule/ 2>/dev/null || echo "   ❌ ./meta-rule not found"
          echo ""
          echo "   Checking ./geo:"
          ls -la geo/ 2>/dev/null || echo "   ❌ ./geo not found"
          echo ""
          echo "   Checking ./geo/geosite:"
          ls -la geo/geosite/ 2>/dev/null | head -10 || echo "   ❌ ./geo/geosite not found"
          
          # Check meta-rule directory structure and adapt (artifacts may be extracted to different locations)
          META_RULE_PATH=""
          
          # Check possible paths
          if [ -d "meta-rule/geo/geosite" ]; then
            META_RULE_PATH="meta-rule/geo/geosite"
            echo "✅ Found rules at: meta-rule/geo/geosite"
          elif [ -d "geo/geosite" ]; then
            META_RULE_PATH="geo/geosite"
            echo "✅ Found rules at: geo/geosite (artifact extracted without meta-rule prefix)"
          elif [ -d "geosite" ]; then
            META_RULE_PATH="geosite"
            echo "✅ Found rules at: geosite (flat structure)"
          elif [ -d "meta-rule" ] && [ ! -d "meta-rule/geo" ]; then
            META_RULE_PATH="meta-rule"
            echo "✅ Found rules at: meta-rule (already flat)"
          fi
          
          if [ -n "$META_RULE_PATH" ]; then
            echo "🔧 Processing rules from: $META_RULE_PATH"
            mkdir -p publish/meta-rule
            
            echo "🔍 Searching for rule files..."
            echo "   YAML files: $(find "$META_RULE_PATH" -name "*.yaml" -type f | wc -l)"
            echo "   LIST files: $(find "$META_RULE_PATH" -name "*.list" -type f | wc -l)"
            echo "   MRS files: $(find "$META_RULE_PATH" -name "*.mrs" -type f | wc -l)"
            
            # Copy all files to flat structure
            echo "🔧 Copying all rule files..."
            cp "$META_RULE_PATH"/*.yaml publish/meta-rule/ 2>/dev/null || true
            cp "$META_RULE_PATH"/*.list publish/meta-rule/ 2>/dev/null || true
            cp "$META_RULE_PATH"/*.mrs publish/meta-rule/ 2>/dev/null || true
            
            echo "🔍 Final meta-rule directory contents:"
            ls -la publish/meta-rule/ | head -20
            echo "📊 Meta-rule files count:"
            echo "  YAML: $(find publish/meta-rule -name "*.yaml" | wc -l)"
            echo "  LIST: $(find publish/meta-rule -name "*.list" | wc -l)"
            echo "  MRS: $(find publish/meta-rule -name "*.mrs" | wc -l)"
          else
            echo "❌ No valid meta-rule structure found!"
            echo "📂 Available directories:"
            ls -la
            echo "🚨 Creating empty meta-rule to prevent total failure..."
            mkdir -p publish/meta-rule
            echo "# Empty meta-rule directory" > publish/meta-rule/README.md
          fi
          
          echo "=== Artifact Summary ==="
          echo "Sing-box rules: $(find publish/sing-rule -type f | wc -l) files"
          echo "Sing-box lite: $(find publish/sing-rule-lite -type f | wc -l) files"
          echo "Mihomo rules: $(find publish/meta-rule -type f | wc -l) files"
          echo "GeoIP rules: $(find publish/sing-geoip -type f 2>/dev/null | wc -l) files"

      - name: Create ZIP archives
        run: |
          mkdir -p release-assets
          echo "📦 Creating ZIP packages"
          
          echo "🔍 Debug: Checking publish directory structure before ZIP..."
          echo "📂 publish/ contents:"
          ls -la publish/
          echo "📂 publish/meta-rule contents:"
          ls -la publish/meta-rule/ | head -20 || echo "❌ meta-rule directory not found or empty"
          
          # Sing-box packages
          cd publish/sing-rule
          if ls *.srs 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-srs.zip *.srs
            echo "✅ sing-rules-srs.zip ($(ls *.srs | wc -l) files)"
          else
            echo "⚠️ No .srs files found in sing-rule"
          fi
          if ls *.json 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-json.zip *.json
            echo "✅ sing-rules-json.zip ($(ls *.json | wc -l) files)"
          else
            echo "⚠️ No .json files found in sing-rule"
          fi
          
          cd ../sing-rule-lite
          if ls *.srs 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-lite-srs.zip *.srs
            echo "✅ sing-rules-lite-srs.zip ($(ls *.srs | wc -l) files)"
          else
            echo "⚠️ No .srs files found in sing-rule-lite"
          fi
          if ls *.json 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-lite-json.zip *.json
            echo "✅ sing-rules-lite-json.zip ($(ls *.json | wc -l) files)"
          else
            echo "⚠️ No .json files found in sing-rule-lite"
          fi
          
          # Mihomo packages  
          cd ../meta-rule
          echo "🔍 Current directory: $(pwd)"
          echo "📂 Files in meta-rule:"
          ls -la | head -20
          
          if ls *.yaml 1> /dev/null 2>&1; then
            zip -r ../../release-assets/meta-rules-yaml.zip *.yaml
            echo "✅ meta-rules-yaml.zip ($(ls *.yaml | wc -l) files)"
          else
            echo "⚠️ No .yaml files found in meta-rule"
          fi
          if ls *.list 1> /dev/null 2>&1; then
            zip -r ../../release-assets/meta-rules-list.zip *.list
            echo "✅ meta-rules-list.zip ($(ls *.list | wc -l) files)"
          else
            echo "⚠️ No .list files found in meta-rule"
          fi
          if ls *.mrs 1> /dev/null 2>&1; then
            zip -r ../../release-assets/meta-rules-mrs.zip *.mrs
            echo "✅ meta-rules-mrs.zip ($(ls *.mrs | wc -l) files)"
          else
            echo "⚠️ No .mrs files found in meta-rule"
          fi
          cd ../..
          
          # GeoIP packages
          if [ -d "publish/sing-geoip" ]; then
            cd publish/sing-geoip
            if ls *.srs 1> /dev/null 2>&1; then
              zip -r ../../release-assets/sing-box-geoip-srs.zip *.srs
              echo "✅ sing-box-geoip-srs.zip ($(ls *.srs | wc -l) files)"
            else
              echo "⚠️ No .srs files found in sing-geoip"
            fi
            cd ../..
          else
            echo "⚠️ sing-geoip directory not found"
          fi
          
          echo "📦 Final release-assets contents:"
          ls -la release-assets/

      - name: Create Unified GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.TAG_NAME }}
          name: Release ${{ env.BUILDTIME }}
          body: |
            ## ⚡ 并行构建版本 (Ultra Fast)
            
            ### 🎯 Sing-box 规则
            - `sing-rules-srs.zip` - 完整版 (.srs 二进制)
            - `sing-rules-json.zip` - 完整版 (.json 源码)
            - `sing-rules-lite-srs.zip` - 精简版 (.srs 二进制) - IP-CIDR + DOMAIN only
            - `sing-rules-lite-json.zip` - 精简版 (.json 源码) - IP-CIDR + DOMAIN only
            
            ### 🛡️ Mihomo 规则
            - `meta-rules-yaml.zip` - YAML 格式 (默认)
            - `meta-rules-list.zip` - LIST 格式 (纯文本，加载更快)
            - `meta-rules-mrs.zip` - MRS 格式 (二进制，性能最优)
            
            ### 🌍 GeoIP 规则
            - `sing-box-geoip-srs.zip` - 所有国家/地区的 IP 地址段 (.srs 二进制)
            - 文件格式: `geoip-{国家代码}.srs` (如 `geoip-cn.srs`)
            - 包含 200+ 个国家/地区的 IP 数据
            
            ### ⚡ 并行构建优势
            - 🚀 **3x 构建速度**: Sing-box、Mihomo 和 GeoIP 并行生成
            - 🎯 **资源隔离**: 每个Job独立运行，互不干扰
            - 📊 **清晰日志**: 分Job显示，问题定位更容易
            - 🔥 **官方算法**: 完全使用MetaCubeX官方代码和算法
            
            ### 📊 数据源
            - **Sing-box**: iOS rule script (~15k 规则)
            - **Mihomo**: 多源整合 GFWList + China domains (~30k 规则)
            - **GeoIP**: MaxMind GeoIP 数据库 (每月更新)
            
            ### 🔗 访问方式
            - **完整规则**: `release` 分支包含所有规则文件
            - **GitHub Raw**: `https://raw.githubusercontent.com/proother/rule_singbox_mihomo/refs/heads/release/`
            - **jsDelivr CDN**: `https://cdn.jsdelivr.net/gh/proother/rule_singbox_mihomo@release/`
          files: |
            release-assets/*.zip

      - name: Push to release branch (Complete Rules)
        run: |
          echo "🌳 PUSHING TO RELEASE BRANCH (Complete Rules)"
          cd publish && git init && git config --local user.name "github-actions[bot]" && git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release && git add . && git commit -m "Released on ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Purge jsDelivr CDN
        run: |
          echo "🚀 Purging jsDelivr CDN - This may take a while..."
          cd publish
          
          # Count files
          total_files=$(find . -name "*.srs" -o -name "*.json" -o -name "*.yaml" -o -name "*.list" -o -name "*.mrs" | wc -l)
          echo "📊 Total files to purge: $total_files"
          
          # Batch purge CDN (100 files per batch)
          batch_size=100
          batch_num=0
          file_count=0
          
          find . -name "*.srs" -o -name "*.json" -o -name "*.yaml" -o -name "*.list" -o -name "*.mrs" | while IFS= read -r file; do
            file_path=$(echo "$file" | sed 's|^\./||')
            curl -s "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file_path}" > /dev/null 2>&1 || true
            
            file_count=$((file_count + 1))
            
            # Show progress every 100 files
            if [ $((file_count % batch_size)) -eq 0 ]; then
              batch_num=$((batch_num + 1))
              echo "✅ Batch $batch_num completed: $file_count/$total_files files purged"
            fi
          done
          
          echo "🎉 CDN purge completed! Total: $file_count files"
