# Unified workflow placeholder

name: Unified Rules Builder (Parallel Jobs)

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

permissions:
  contents: write

env:
  GOAMD64: v3
  BUILDTIME: ${{ github.run_id }}
  TAG_NAME: ${{ github.run_id }}

jobs:
  # Job 1: Generate Sing-box Rules (Parallel)
  sing-box-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Checkout blackmatrix7/ios_rule_script
        uses: actions/checkout@v4
        with:
          repository: blackmatrix7/ios_rule_script
          path: ios_rule_script

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Prepare data source
        run: |
          echo "🎯 GENERATING SING-BOX RULES"
          echo "📁 Scanning iOS rule script directories..."
          mkdir -p community/data_source
          total_dirs=0
          copied_files=0
          
          for dir in $(find ios_rule_script/rule/Clash -type d); do
            total_dirs=$((total_dirs + 1))
            if ls "$dir"/*_Classical.yaml 2>/dev/null; then
              classical_files=$(find "$dir" -type f -name '*_Classical.yaml' ! -name '*_No_Resolve.yaml')
              for file in $classical_files; do
                cp "$file" community/data_source/
                copied_files=$((copied_files + 1))
                echo "📄 Copied: $(basename "$file")"
              done
            else
              dir_name=$(basename "$dir")
              target_file=$(find "$dir" -type f -name "${dir_name}.yaml" ! -name '*_No_Resolve.yaml' -print -quit)
              if [[ -n "$target_file" ]]; then
                cp "$target_file" community/data_source/
                copied_files=$((copied_files + 1))
                echo "📄 Copied: $(basename "$target_file")"
              fi
            fi
          done
          
          echo "✅ Data source preparation complete:"
          echo "   📂 Scanned directories: $total_dirs"
          echo "   📄 Files copied: $copied_files"
          echo "   📋 Final count: $(ls community/data_source | wc -l) files"

      - name: Convert to sing rules
        run: |
          echo "🔄 Converting YAML rules to Sing-box format..."
          mkdir -p sing-rule
          cd converter && go build -o meta-converter .
          echo "✅ Meta-converter built successfully"
          
          echo "🎯 Starting conversion process..."
          ./meta-converter clash -f ../community/data_source -o ../sing-rule -t sing-box
          
          echo "📝 Processing converted files..."
          cd ../sing-rule
          processed_count=0
          for dir in */; do
            dir_name=$(basename "$dir")
            if [[ -f "$dir/classical.json" && -f "$dir/classical.srs" ]]; then
              original_yaml=$(find ../community/data_source -type f -iname "${dir_name}.yaml" -print -quit)
              if [[ -n "$original_yaml" ]]; then
                original_name=$(basename "$original_yaml" .yaml)
                mv "$dir/classical.json" "${original_name}.json"
                mv "$dir/classical.srs" "${original_name}.srs"
                echo "✅ Processed: ${original_name} (.json + .srs)"
              else
                mv "$dir/classical.json" "${dir_name}.json"
                mv "$dir/classical.srs" "${dir_name}.srs"
                echo "✅ Processed: ${dir_name} (.json + .srs)"
              fi
              processed_count=$((processed_count + 1))
            fi
            rm -rf "$dir"
          done
          
          echo "🎉 Conversion complete:"
          echo "   📄 Processed rules: $processed_count"
          echo "   📊 Generated files: $(ls *.json *.srs 2>/dev/null | wc -l)"

      - name: Create lite rules with cleanup
        run: |
          echo "🔧 Creating Lite rules (IP-CIDR + DOMAIN only)..."
          mkdir -p sing-rule-lite
          sudo apt-get update && sudo apt-get install -y jq
          
          echo "📝 Step 1: Creating lite JSON rules..."
          lite_json_count=0
          for json_file in sing-rule/*.json; do
            if [[ -f "$json_file" ]]; then
              filename=$(basename "$json_file" .json)
              echo "   Processing: $filename"
              jq '{version: .version, rules: [.rules[] | with_entries(select(.key == "ip_cidr" or .key == "domain")) | select(keys | length > 0)]}' "$json_file" > "sing-rule-lite/${filename}.json"
              rule_count=$(jq '.rules | if . == null then 0 else length end' "sing-rule-lite/${filename}.json")
              if [[ "$rule_count" -eq 0 ]]; then
                echo "   ❌ Removed empty: $filename (0 rules)"
                rm "sing-rule-lite/${filename}.json"
              else
                echo "   ✅ Created: $filename ($rule_count rules)"
                lite_json_count=$((lite_json_count + 1))
              fi
            fi
          done
          
          echo "📝 Step 2: Preparing YAML sources for SRS conversion..."
          mkdir -p lite-yaml-source
          yaml_count=0
          for yaml_file in community/data_source/*.yaml; do
            if [[ -f "$yaml_file" ]]; then
              filename=$(basename "$yaml_file" .yaml)
              {
                echo "payload:"
                grep -E "^\s*-\s*DOMAIN," "$yaml_file" | sed 's/^[[:space:]]*/  /' || true
                grep -E "^\s*-\s*IP-CIDR," "$yaml_file" | sed 's/^[[:space:]]*/  /' || true
              } > "lite-yaml-source/${filename}.yaml"
              rule_count=$(grep -c "^\s*-\s*" "lite-yaml-source/${filename}.yaml" 2>/dev/null || echo "0")
              if [[ "$rule_count" -eq 0 ]]; then
                echo "payload:" > "lite-yaml-source/${filename}.yaml"
              fi
              yaml_count=$((yaml_count + 1))
            fi
          done
          
          echo "📝 Step 3: Converting lite YAML to SRS..."
          cd converter
          if ./meta-converter clash -f ../lite-yaml-source -o ../sing-rule-lite-converted -t sing-box 2>&1; then
            echo "✅ SRS conversion successful"
            cd ../sing-rule-lite-converted
            srs_count=0
            for dir in */; do
              if [[ -d "$dir" ]]; then
                dir_name=$(basename "$dir")
                for lite_json in ../sing-rule-lite/*.json; do
                  if [[ -f "$lite_json" ]]; then
                    lite_basename=$(basename "$lite_json" .json)
                    if [[ "${lite_basename,,}" == "${dir_name,,}" ]]; then
                      original_basename=$(basename "$lite_json" .json)
                      if [[ -f "$dir/classical.json" && -f "$dir/classical.srs" ]]; then
                        mv "$dir/classical.json" "../sing-rule-lite/${original_basename}.json"
                        mv "$dir/classical.srs" "../sing-rule-lite/${original_basename}.srs"
                        echo "   ✅ SRS created: $original_basename"
                        srs_count=$((srs_count + 1))
                      elif [[ -f "$dir/classical.json" ]]; then
                        mv "$dir/classical.json" "../sing-rule-lite/${original_basename}.json"
                      fi
                      break
                    fi
                  fi
                done
              fi
            done
            cd ..
          else
            echo "⚠️ SRS conversion failed, continuing with JSON only"
          fi
          rm -rf lite-yaml-source sing-rule-lite-converted
          
          echo "📝 Step 4: Final cleanup - removing empty files..."
          cleaned_count=0
          for lite_file in sing-rule-lite/*.json; do
            if [[ -f "$lite_file" ]]; then
              rule_count=$(jq '.rules | if . == null then 0 else length end' "$lite_file" 2>/dev/null || echo "0")
              if [[ "$rule_count" -eq 0 ]]; then
                echo "   🗑️ Cleaned: $(basename "$lite_file") (empty)"
                rm "$lite_file"
                srs_file="${lite_file%.json}.srs"
                [[ -f "$srs_file" ]] && rm "$srs_file"
                cleaned_count=$((cleaned_count + 1))
              fi
            fi
          done
          
          echo "🎉 Lite rules creation complete:"
          echo "   📄 Lite JSON files: $lite_json_count"
          echo "   📄 YAML sources: $yaml_count"
          echo "   📄 SRS files: $srs_count"
          echo "   🗑️ Cleaned empty: $cleaned_count"
          echo "   📊 Final count: $(ls sing-rule-lite/*.json sing-rule-lite/*.srs 2>/dev/null | wc -l) files"

      - name: Upload sing-box artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sing-box-rules
          path: |
            sing-rule/
            sing-rule-lite/

  # Job 2: Generate Mihomo Rules (Official MetaCubeX Method)
  mihomo-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
          echo "CHINA_DOMAINS_URL=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Domain.txt" >> $GITHUB_ENV
          echo "GOOGLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "APPLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "CUSTOM_PROXY=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/geolocation-!cn.txt" >> $GITHUB_ENV
        shell: bash

      - name: Checkout MetaCubeX/meta-rules-dat (Official)
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-dat

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: convert

      - name: Checkout cokebar/gfwlist2dnsmasq
        uses: actions/checkout@v4
        with:
          repository: cokebar/gfwlist2dnsmasq
          path: gfwlist2dnsmasq

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: ./custom/go.sum

      - name: Generate GFWList domains
        run: |
          echo "🛡️ GENERATING MIHOMO RULES (Official MetaCubeX Method)"
          cd gfwlist2dnsmasq || exit 1
          chmod +x ./gfwlist2dnsmasq.sh
          ./gfwlist2dnsmasq.sh -l -o ./temp-gfwlist.txt

      - name: Get and add direct domains into temp-direct.txt file
        run: |
          curl -sSL ${CHINA_DOMAINS_URL} | sed '/^\s*#/d' | sed '/^[^\.]/ s/^/full:/' |  sed 's/^\.\([^.]*\)/\1/' > temp-direct.txt 

      - name: Get and add proxy domains into temp-proxy.txt file
        run: |
          cat ./gfwlist2dnsmasq/temp-gfwlist.txt | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' > temp-proxy.txt
          curl -sSL $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -sSL $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          curl -sSL ${CUSTOM_PROXY} | grep -Ev ":@cn" | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> temp-proxy.txt

      - name: Reserve `full`, `regexp` and `keyword` type of rules from custom lists to "reserve" files
        run: |
          curl -sSL ${CUSTOM_PROXY} | grep -Ev ":@cn" | perl -ne '/^((full|regexp|keyword):[^:]+)(\n$|:@.+)/ && print "$1\n"' | sort --ignore-case -u > proxy-reserve.txt
          
      - name: Add proxy, direct and reject domains from "hidden" branch to appropriate temp files
        run: |
          cat ./resouces/proxy.txt >> temp-proxy.txt
          cat ./resouces/direct.txt >> temp-direct.txt

      - name: Sort and generate redundant lists
        run: |
          cat temp-proxy.txt | sort --ignore-case -u > proxy-list-with-redundant
          cat temp-direct.txt | sort --ignore-case -u > direct-list-with-redundant

      - name: Remove redundant domains (Official Method)
        run: |
          echo "🔧 Using Official MetaCubeX redundancy removal..."
          chmod +x ./resouces/*.py
          python ./resouces/findRedundantDomain.py ./direct-list-with-redundant ./direct-list-deleted-unsort
          python ./resouces/findRedundantDomain.py ./proxy-list-with-redundant ./proxy-list-deleted-unsort
          [ ! -f "direct-list-deleted-unsort" ] && touch direct-list-deleted-unsort
          [ ! -f "proxy-list-deleted-unsort" ] && touch proxy-list-deleted-unsort
          sort ./direct-list-deleted-unsort > ./direct-list-deleted-sort
          sort ./proxy-list-deleted-unsort > ./proxy-list-deleted-sort
          python ./resouces/removeFrom.py -remove ./direct-list-deleted-sort -from ./direct-list-with-redundant -out direct-list-without-redundant
          python ./resouces/removeFrom.py -remove ./proxy-list-deleted-sort -from ./proxy-list-with-redundant -out proxy-list-without-redundant

      - name: Remove domains from "need-to-remove" lists in "hidden" branch
        run: |
          python ./resouces/removeFrom.py -remove ./resouces/direct-need-to-remove.txt -from ./direct-list-without-redundant -out ./temp-cn.txt
          python ./resouces/removeFrom.py -remove ./resouces/proxy-need-to-remove.txt -from ./proxy-list-without-redundant -out ./temp-geolocation-\!cn.txt

      - name: Remove domains end with ".cn" in "temp-geolocation-!cn.txt" and write lists to data directory
        run: |
          cat temp-cn.txt | grep -v google | grep -v manhua | grep -v ooklaserver | grep -v "acg.rip" | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' > ./community/data/cn
          cat temp-cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > direct-tld-list.txt
          cat temp-geolocation-\!cn.txt | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' | perl -ne 'print if not /\.cn$/' > ./community/data/geolocation-\!cn
          cat temp-geolocation-\!cn.txt | sort --ignore-case -u | perl -ne 'print if not /^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/' > proxy-tld-list.txt

      - name: Add `full`, `regexp` and `keyword` type of rules back into "cn", and "geolocation-!cn" list
        run: |
          [ -f "direct-reserve.txt" ] && cat direct-reserve.txt >> ./community/data/cn
          [ -f "proxy-reserve.txt" ] && cat proxy-reserve.txt >> ./community/data/geolocation-\!cn
          cp ./community/data/cn direct-list.txt
          cp ./community/data/geolocation-\!cn proxy-list.txt

      - name: Build geosite.dat file
        run: |
          cd custom || exit 1
          echo ipleak.net >> ../community/data/geolocation-\!cn && echo browserleaks.org >> ../community/data/geolocation-\!cn
          go run ./ --datapath=../community/data

      - name: Convert geo to meta-rule-set
        env:
          NO_SKIP: true
        run: |
          mkdir -p meta-rule/geo/geosite && mkdir -p meta-rule/geo/geoip
          cd convert
          go run ./ geosite -f ../custom/publish/geosite.dat -o ../meta-rule/geo/geosite
          echo "✅ Meta rules generated: $(find ../meta-rule -name "*.yaml" -o -name "*.list" | wc -l) files"
          
      - name: Download and Generate MRS files
        run: |
          echo "🔄 Generating MRS (Meta Rule Set) binary files..."
          echo "📥 Downloading mihomo binary for MRS conversion..."
          
          # 下载最新的mihomo Linux AMD64版本
          MIHOMO_VERSION=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          wget -q "https://github.com/MetaCubeX/mihomo/releases/download/v${MIHOMO_VERSION}/mihomo-linux-amd64-v${MIHOMO_VERSION}.tar.gz" -O mihomo.tar.gz
          tar -xzf mihomo.tar.gz
          chmod +x mihomo
          
          # 创建MRS输出目录
          mkdir -p meta-rule/geo/geosite-mrs
          
          echo "🔄 Converting YAML to MRS format..."
          cd meta-rule/geo/geosite
          
          # 转换每个YAML文件到MRS
          converted_count=0
          for yaml_file in *.yaml; do
            if [ -f "$yaml_file" ]; then
              base_name="${yaml_file%.yaml}"
              # 检测文件类型并验证是否可以转换为MRS
              has_ipcidr=false
              has_domain=false
              has_other=false
              
              # 检查规则类型
              if grep -q "IP-CIDR" "$yaml_file" || grep -q "ip_cidr" "$yaml_file"; then
                has_ipcidr=true
              fi
              if grep -q "DOMAIN" "$yaml_file" || grep -q "domain" "$yaml_file"; then
                has_domain=true
              fi
              if grep -q "PROCESS" "$yaml_file" || grep -q "GEOSITE" "$yaml_file" || grep -q "GEOIP" "$yaml_file"; then
                has_other=true
              fi
              
              # MRS只支持纯domain或纯ipcidr
              if [ "$has_other" = true ]; then
                echo "   ⏭️ Skipping: $yaml_file (contains unsupported rule types for MRS)"
              elif [ "$has_ipcidr" = true ] && [ "$has_domain" = false ]; then
                behavior="ipcidr"
                echo "   Converting: $yaml_file (behavior: $behavior)"
                if ../../../mihomo convert-ruleset $behavior yaml "$yaml_file" "../geosite-mrs/${base_name}.mrs" 2>/dev/null; then
                  echo "   ✅ Generated: ${base_name}.mrs"
                  converted_count=$((converted_count + 1))
                else
                  echo "   ⚠️ Failed to convert: $yaml_file"
                fi
              elif [ "$has_domain" = true ] && [ "$has_ipcidr" = false ]; then
                behavior="domain"
                echo "   Converting: $yaml_file (behavior: $behavior)"
                if ../../../mihomo convert-ruleset $behavior yaml "$yaml_file" "../geosite-mrs/${base_name}.mrs" 2>/dev/null; then
                  echo "   ✅ Generated: ${base_name}.mrs"
                  converted_count=$((converted_count + 1))
                else
                  echo "   ⚠️ Failed to convert: $yaml_file"
                fi
              else
                echo "   ⏭️ Skipping: $yaml_file (mixed rule types not supported by MRS)"
              fi
            fi
          done
          
          cd ../../..
          echo "📊 MRS files generated: $converted_count"
          echo "✅ All formats generated: YAML + LIST + MRS"

      - name: Upload mihomo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mihomo-rules
          path: meta-rule/

  # Job 3: Publish (Sequential - waits for both parallel jobs)
  publish:
    runs-on: ubuntu-latest
    needs: [sing-box-rules, mihomo-rules]
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Download sing-box artifacts
        uses: actions/download-artifact@v4
        with:
          name: sing-box-rules
          path: ./

      - name: Download mihomo artifacts
        uses: actions/download-artifact@v4
        with:
          name: mihomo-rules
          path: ./

      - name: Prepare publish artifacts
        run: |
          echo "📦 PREPARING UNIFIED PUBLISH"
          mkdir -p publish
          cp -r sing-rule publish/sing-rule
          cp -r sing-rule-lite publish/sing-rule-lite
          
          echo "🔍 Debug: Checking directory structure..."
          echo "📂 Root directory contents:"
          ls -la
          echo "📂 Checking for meta-rule directory:"
          ls -la meta-rule/ || echo "❌ meta-rule directory not found"
          echo "📂 Checking meta-rule subdirectories:"
          ls -la meta-rule/geo/ || echo "❌ meta-rule/geo directory not found"
          ls -la meta-rule/geo/geosite/ || echo "❌ meta-rule/geo/geosite directory not found"
          
          # 检查meta-rule目录结构并适配
          if [ -d "meta-rule/geo/geosite" ]; then
            echo "🔧 Detected official nested structure, flattening..."
            mkdir -p publish/meta-rule
            
            echo "🔍 Searching for rule files..."
            echo "YAML files: $(find meta-rule/geo/geosite -name "*.yaml" -type f | wc -l)"
            echo "MRS files: $(find meta-rule/geo/geosite-mrs -name "*.mrs" -type f 2>/dev/null | wc -l || echo 0)"
            
            # 复制所有yaml文件到平铺结构
            echo "🔧 Starting flatten process for YAML files..."
            for file in $(find meta-rule/geo/geosite -name "*.yaml" -type f); do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                echo "📝 Processing YAML: $file -> ${filename}"
                cp "$file" "publish/meta-rule/${filename}"
                
                # 生成对应的list文件 (去掉yaml的第一行payload:)
                tail -n +2 "$file" | sed 's/^[[:space:]]*-\s*//g' | grep -v '^$' > "publish/meta-rule/${filename%.yaml}.list"
                echo "✅ Generated: ${filename} + ${filename%.yaml}.list"
              fi
            done
            
            # 复制MRS文件（如果存在）
            if [ -d "meta-rule/geo/geosite-mrs" ]; then
              echo "🔧 Processing MRS files..."
              for file in $(find meta-rule/geo/geosite-mrs -name "*.mrs" -type f); do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  echo "📝 Processing MRS: $file -> ${filename}"
                  cp "$file" "publish/meta-rule/${filename}"
                  echo "✅ Copied: ${filename}"
                fi
              done
            else
              echo "⚠️ No MRS directory found, skipping MRS files"
            fi
            
            echo "🔍 Final meta-rule directory contents:"
            ls -la publish/meta-rule/ | head -20
            echo "📊 Meta-rule files count:"
            echo "  YAML: $(find publish/meta-rule -name "*.yaml" | wc -l)"
            echo "  LIST: $(find publish/meta-rule -name "*.list" | wc -l)"
            echo "  MRS: $(find publish/meta-rule -name "*.mrs" | wc -l)"
            
          elif [ -d "meta-rule" ] && [ ! -d "meta-rule/geo" ]; then
            echo "🔧 Using existing flat structure..."
            cp -r meta-rule/* publish/meta-rule/ 2>/dev/null || true
          else
            echo "❌ No valid meta-rule structure found!"
            echo "📂 Available directories:"
            ls -la
            echo "📂 meta-rule contents (if exists):"
            ls -la meta-rule/ || echo "meta-rule not found"
            echo "🚨 Creating empty meta-rule to prevent total failure..."
            mkdir -p publish/meta-rule
            echo "# Empty meta-rule directory" > publish/meta-rule/README.md
          fi
          
          echo "=== Artifact Summary ==="
          echo "Sing-box rules: $(find publish/sing-rule -type f | wc -l) files"
          echo "Sing-box lite: $(find publish/sing-rule-lite -type f | wc -l) files"
          echo "Mihomo rules: $(find publish/meta-rule -type f | wc -l) files"

      - name: Create ZIP archives
        run: |
          mkdir -p release-assets
          echo "📦 Creating ZIP packages"
          
          echo "🔍 Debug: Checking publish directory structure before ZIP..."
          echo "📂 publish/ contents:"
          ls -la publish/
          echo "📂 publish/meta-rule contents:"
          ls -la publish/meta-rule/ | head -20 || echo "❌ meta-rule directory not found or empty"
          
          # Sing-box packages
          cd publish/sing-rule
          if ls *.srs 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-srs.zip *.srs
            echo "✅ sing-rules-srs.zip ($(ls *.srs | wc -l) files)"
          else
            echo "⚠️ No .srs files found in sing-rule"
          fi
          if ls *.json 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-json.zip *.json
            echo "✅ sing-rules-json.zip ($(ls *.json | wc -l) files)"
          else
            echo "⚠️ No .json files found in sing-rule"
          fi
          
          cd ../sing-rule-lite
          if ls *.srs 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-lite-srs.zip *.srs
            echo "✅ sing-rules-lite-srs.zip ($(ls *.srs | wc -l) files)"
          else
            echo "⚠️ No .srs files found in sing-rule-lite"
          fi
          if ls *.json 1> /dev/null 2>&1; then
            zip -r ../../release-assets/sing-rules-lite-json.zip *.json
            echo "✅ sing-rules-lite-json.zip ($(ls *.json | wc -l) files)"
          else
            echo "⚠️ No .json files found in sing-rule-lite"
          fi
          
          # Mihomo packages  
          cd ../meta-rule
          echo "🔍 Current directory: $(pwd)"
          echo "📂 Files in meta-rule:"
          ls -la | head -20
          
          if ls *.yaml 1> /dev/null 2>&1; then
            zip -r ../../release-assets/meta-rules-yaml.zip *.yaml
            echo "✅ meta-rules-yaml.zip ($(ls *.yaml | wc -l) files)"
          else
            echo "⚠️ No .yaml files found in meta-rule"
          fi
          if ls *.list 1> /dev/null 2>&1; then
            zip -r ../../release-assets/meta-rules-list.zip *.list
            echo "✅ meta-rules-list.zip ($(ls *.list | wc -l) files)"
          else
            echo "⚠️ No .list files found in meta-rule"
          fi
          if ls *.mrs 1> /dev/null 2>&1; then
            zip -r ../../release-assets/meta-rules-mrs.zip *.mrs
            echo "✅ meta-rules-mrs.zip ($(ls *.mrs | wc -l) files)"
          else
            echo "⚠️ No .mrs files found in meta-rule"
          fi
          cd ../..
          
          echo "📦 Final release-assets contents:"
          ls -la release-assets/

      - name: Create Unified GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.TAG_NAME }}
          name: 🚀 Parallel Build Release ${{ env.BUILDTIME }}
          body: |
            ## ⚡ 并行构建版本 (Ultra Fast)
            
            ### 🎯 Sing-box 规则
            - `sing-rules-srs.zip` - 完整版 (.srs 二进制)
            - `sing-rules-json.zip` - 完整版 (.json 源码)
            - `sing-rules-lite-srs.zip` - 精简版 (.srs 二进制) - IP-CIDR + DOMAIN only
            - `sing-rules-lite-json.zip` - 精简版 (.json 源码) - IP-CIDR + DOMAIN only
            
            ### 🛡️ Mihomo 规则
            - `meta-rules-yaml.zip` - YAML 格式 (默认)
            - `meta-rules-list.zip` - LIST 格式 (纯文本，加载更快)
            - `meta-rules-mrs.zip` - MRS 格式 (二进制，性能最优)
            
            ### ⚡ 并行构建优势
            - 🚀 **2x 构建速度**: Sing-box 和 Mihomo 并行生成
            - 🎯 **资源隔离**: 每个Job独立运行，互不干扰
            - 📊 **清晰日志**: 分Job显示，问题定位更容易
            - 🔥 **官方算法**: 完全使用MetaCubeX官方代码和算法
            
            ### 📊 数据源
            - **Sing-box**: iOS rule script (~15k 规则)
            - **Mihomo**: 多源整合 GFWList + China domains (~30k 规则)
            
            ### 🔗 访问方式
            - **完整规则**: `release` 分支包含所有规则文件
            - **GitHub Raw**: `https://raw.githubusercontent.com/proother/rule_singbox_mihomo/refs/heads/release/`
            - **jsDelivr CDN**: `https://cdn.jsdelivr.net/gh/proother/rule_singbox_mihomo@release/`
          files: |
            release-assets/*.zip

      - name: Push to release branch (Complete Rules)
        run: |
          echo "🌳 PUSHING TO RELEASE BRANCH (Complete Rules)"
          cd publish && git init && git config --local user.name "github-actions[bot]" && git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release && git add . && git commit -m "🚀 Parallel Build Released on ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Purge jsDelivr CDN
        run: |
          echo "🚀 Purging jsDelivr CDN - This may take a while..."
          cd publish
          
          # 统计文件
          total_files=$(find . -name "*.srs" -o -name "*.json" -o -name "*.yaml" -o -name "*.list" -o -name "*.mrs" | wc -l)
          echo "📊 Total files to purge: $total_files"
          
          # 分批清理CDN（每批100个文件）
          batch_size=100
          batch_num=0
          file_count=0
          
          find . -name "*.srs" -o -name "*.json" -o -name "*.yaml" -o -name "*.list" -o -name "*.mrs" | while IFS= read -r file; do
            file_path=$(echo "$file" | sed 's|^\./||')
            curl -s "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file_path}" > /dev/null 2>&1 || true
            
            file_count=$((file_count + 1))
            
            # 每100个文件显示进度
            if [ $((file_count % batch_size)) -eq 0 ]; then
              batch_num=$((batch_num + 1))
              echo "✅ Batch $batch_num completed: $file_count/$total_files files purged"
            fi
          done
          
          echo "🎉 CDN purge completed! Total: $file_count files"
