name: Convert Workflow

on:
  # Trigger this workflow on manual dispatch or on pushes to the main branch
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #
      # 1. Set variables
      #
      - name: Set variables
        shell: bash
        run: |
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          # Add any other variables you need:
          # echo "MY_VARIABLE=some_value" >> $GITHUB_ENV

      #
      # 2. Checkout multiple repositories
      #    2.1 Checkout MetaCubeX/meta-rules-dat
      #    2.2 Checkout blackmatrix7/ios_rule_script
      #    2.3 Checkout MetaCubeX/meta-rules-converter
      #
      - name: Checkout MetaCubeX/meta-rules-dat
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-dat
          # path: meta-rules-dat  # Optional path if you want a subfolder

      - name: Checkout blackmatrix7/ios_rule_script
        uses: actions/checkout@v4
        with:
          repository: blackmatrix7/ios_rule_script
          path: ios_rule_script  # This folder will contain all blackmatrix7’s rules

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter  # This folder will contain the converter tool

      #
      # 3. Set up Go
      #
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.23'
          # Adjust the Go version as needed

      #
      # 4. Prepare a publish directory
      #
      - name: Prepare publish folder
        run: |
          mkdir -p publish

      #
      # METHOD A: Combine ALL .list files into a single file, convert once
      #
      - name: Method A - Combine & Convert (Single File)
        run: |
          echo "=== Combining .list files ==="
          cd ios_rule_script/rule/Clash
          
          # 1) Combine all .list files into a single file
          cat */*.list > all_merged_rules.txt
          
          # 2) (Optional) Sort / deduplicate
          sort -u all_merged_rules.txt -o all_merged_rules.txt
          
          cd ../../../converter
          echo "=== Converting single file to .dat (mihomo) & .db (sing-box) ==="

          # Example: Use the "geosite" subcommand with its known flags
          # (Replace with the correct subcommand and flags as per your converter’s --help)
          # Below: -f is input file, -o is output file, -t is the target type or format.

          # 1) Convert to .dat for "mihomo"
          go run . geosite \
            -f ../ios_rule_script/rule/Clash/all_merged_rules.txt \
            -o ../publish/all_rules_mihomo.dat \
            -t mihomo

          # 2) Convert to .db for "sing-box"
          go run . geosite \
            -f ../ios_rule_script/rule/Clash/all_merged_rules.txt \
            -o ../publish/all_rules_singbox.db \
            -t sing-box

          echo "Single-file conversion complete."

      #
      # METHOD B: Process each .list file individually
      #           (Create .yaml & .mrs for mihomo, .json & .srs for sing-box)
      #
      - name: Method B - Convert each file individually
        run: |
          echo "=== Converting each .list file individually ==="
          cd ios_rule_script/rule/Clash

          # Loop over each .list file
          for file in $(find . -type f -name "*.list"); do
            echo "Processing $file..."
            
            # Extract the base name without extension, e.g. "SteamCN.list" -> "SteamCN"
            filename=$(basename "$file" .list)
            
            # Example: Use the same "geosite" subcommand but produce different outputs
            #   (Replace with your real converter usage & flags.)
            #   For mihomo: .yaml & .mrs
            #   For sing-box: .json & .srs

            # Convert to .yaml (for mihomo)
            ../../../converter/convert geosite \
              -f "$file" \
              -o "../$filename.yaml" \
              -t mihomo-yaml

            # Convert to .mrs (for mihomo, if that format is supported)
            ../../../converter/convert geosite \
              -f "$file" \
              -o "../$filename.mrs" \
              -t mihomo-mrs

            # Convert to .json (for sing-box)
            ../../../converter/convert geosite \
              -f "$file" \
              -o "../$filename.json" \
              -t sing-box-json

            # Convert to .srs (for sing-box)
            ../../../converter/convert geosite \
              -f "$file" \
              -o "../$filename.srs" \
              -t sing-box-srs
          done

          echo "All individual files converted."
          mv ./*.yaml ./*.mrs ./*.json ./*.srs ../../publish || true

      #
      # 5. [Optional] If you need to delete existing release assets
      #
      - name: Delete current assets
        uses: andreaswilli/delete-release-assets-action@v3.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: main
          deleteOnlyFromDrafts: false

      #
      # 6. Create and upload release
      #
      - name: Create & Upload Release
        id: create_upload_release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: "Release ${{ env.BUILDTIME }}"
          tag: main
          file_glob: true
          overwrite: true
          file: ./publish/*

      #
      # 7. Git push assets (if you want them in the repo itself)
      #
      - name: Commit and push assets to main (subfolder)
        run: |
          cd publish
          git init
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b main-assets
          git add .
          git commit -m "Assets from ${{ env.BUILDTIME }}"
          # Force push to your main branch subfolder or a dedicated branch
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin main-assets

      #
      # 8. Purge jsdelivr CDN (optional)
      #
      - name: Purge jsdelivr CDN
        run: |
          for file in $(ls publish); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@main/${file}"
          done
