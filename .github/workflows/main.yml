name: Convert Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #
      # 1. Set variables
      #
      - name: Set variables
        shell: bash
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

      #
      # 2. Check out repositories
      #
      - name: Checkout blackmatrix7/ios_rule_script
        uses: actions/checkout@v4
        with:
          repository: blackmatrix7/ios_rule_script
          path: ios_rule_script

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      #
      # 3. Setup Go
      #
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: ./custom/go.sum

      #
      # 4. Copy files to data source directory
      #
      - name: Copy files to data source directory
        run: |
          echo "=== Copying necessary files to data source directory ==="
          mkdir -p community/data_source

          # Copy .yaml files
          echo "=== Copying .yaml files ==="
          for dir in $(find ios_rule_script/rule/Clash -type d); do
            if ls "$dir"/*_Classical.yaml 2>/dev/null; then
              find "$dir" -type f -name '*_Classical.yaml' ! -name '*_No_Resolve.yaml' -exec cp {} community/data_source/ \;
            else
              dir_name=$(basename "$dir")
              find "$dir" -type f -name "${dir_name}.yaml" ! -name '*_No_Resolve.yaml' -exec cp {} community/data_source/ \;
            fi
          done

          echo "=== Files in community/data_source ==="
          ls -al community/data_source

      #
      # 5. Convert YAML to sing rules
      #
      - name: Convert YAML to sing rules
        run: |
          echo "=== Converting .yaml to sing rules ==="
          mkdir -p sing-rule
          cd converter
          go run . clash -i ../community/data_source -o ../sing-rule -t sing-box
          cd ../sing-rule

          for dir in */; do
              dir_name=$(basename "$dir")
              if [[ -f "$dir/classical.json" && -f "$dir/classical.srs" ]]; then
                  mv "$dir/classical.json" "${dir_name}.json"
                  mv "$dir/classical.srs" "${dir_name}.srs"
                  rm -rf "$dir"
              fi
          done

          for file in *.json *.srs; do
              if [[ "$file" == *_classical.* ]]; then
                  new_name=$(echo "$file" | sed 's/_classical//')
                  mv "$file" "$new_name"
              fi
          done

          echo "=== Final files in sing-rule ==="
          ls -al

      #
      # 6. Process YAML files for meta-rule
      #
      - name: Process YAML files for meta-rule
        run: |
          echo "=== Processing YAML files for meta-rule ==="
          mkdir -p meta-rule
          cp community/data_source/*.yaml meta-rule/

          # Remove comments from YAML files
          echo "=== Removing comments from YAML files ==="
          for file in meta-rule/*.yaml; do
            sed '/^#/d;/^$/d' "$file" > tmp && mv tmp "$file"
          done

          echo "=== Final files in meta-rule ==="
          ls -al meta-rule

      #
      # 7. Gather artifacts into publish folder
      #
      - name: Prepare publish artifacts
        run: |
          echo "=== Collecting final artifacts into ./publish/ ==="
          mkdir -p publish

          # Move sing-rule and meta-rule into publish/
          cp -r sing-rule publish/sing-rule
          cp -r meta-rule publish/meta-rule
          echo "=== sing-rule file count: $(find sing-rule -type f | wc -l) ==="
          echo "=== meta-rule file count: $(find meta-rule -type f | wc -l) ==="
          ls -R publish

      #
      # 8. Clone 'release' branch into previous_release
      #
      - name: Clone 'release' branch
        run: |
          git clone -b release https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git previous_release

      #
      # 9. Compare 'publish' with 'previous_release'
      #
      - name: Compare directories
        id: compare
        run: |
          if [ -d previous_release ]; then
            if diff -qr publish previous_release > changes.diff; then
              echo "No changes detected."
              echo "::set-output name=changes::false"
            else
              echo "Changes detected."
              echo "::set-output name=changes::true"
            fi
          else
            echo "Release branch not found."
            echo "::set-output name=changes::true"
          fi

      #
      # 10. Commit & push to 'release' branch if changes detected
      #
      - name: Commit and push assets to 'release'
        if: ${{ steps.compare.outputs.changes == 'true' }}
        run: |
          echo "=== Committing ./publish/ to branch 'release' ==="
          cd publish
          git init
          git config user.name "github-actions[bot]"
          git config user.email "idontknow+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "Assets from ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.RULE_SINGBOX_MIHOMO_SECRET }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      #
      # 11. Purge jsdelivr CDN if changes detected
      #
      - name: Purge jsdelivr CDN
        if: ${{ steps.compare.outputs.changes == 'true' }}
        run: |
          echo "=== Purging jsDelivr cache for files in ./publish/ ==="
          for file in $(find publish -type f); do
            filename=$(basename "$file")
            echo "Purging $filename..."
            curl -i "https://purge.jsdelivr.net/gh/${GITHUB_REPOSITORY}@release/${filename}"
          done

      - name: Done
        run: echo "All steps completed!"
