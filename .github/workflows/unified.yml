# Unified workflow placeholder

name: Unified Rules Builder (Parallel Jobs)

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

permissions:
  contents: write

env:
  GOAMD64: v3
  BUILDTIME: ${{ github.run_id }}
  TAG_NAME: ${{ github.run_id }}

jobs:
  # Job 1: Generate Sing-box Rules (Parallel)
  sing-box-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Checkout blackmatrix7/ios_rule_script
        uses: actions/checkout@v4
        with:
          repository: blackmatrix7/ios_rule_script
          path: ios_rule_script

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Prepare data source
        run: |
          echo "🎯 GENERATING SING-BOX RULES"
          echo "📁 Scanning iOS rule script directories..."
          mkdir -p community/data_source
          total_dirs=0
          copied_files=0
          
          for dir in $(find ios_rule_script/rule/Clash -type d); do
            total_dirs=$((total_dirs + 1))
            if ls "$dir"/*_Classical.yaml 2>/dev/null; then
              classical_files=$(find "$dir" -type f -name '*_Classical.yaml' ! -name '*_No_Resolve.yaml')
              for file in $classical_files; do
                cp "$file" community/data_source/
                copied_files=$((copied_files + 1))
                echo "📄 Copied: $(basename "$file")"
              done
            else
              dir_name=$(basename "$dir")
              target_file=$(find "$dir" -type f -name "${dir_name}.yaml" ! -name '*_No_Resolve.yaml' -print -quit)
              if [[ -n "$target_file" ]]; then
                cp "$target_file" community/data_source/
                copied_files=$((copied_files + 1))
                echo "📄 Copied: $(basename "$target_file")"
              fi
            fi
          done
          
          echo "✅ Data source preparation complete:"
          echo "   📂 Scanned directories: $total_dirs"
          echo "   📄 Files copied: $copied_files"
          echo "   📋 Final count: $(ls community/data_source | wc -l) files"

      - name: Convert to sing rules
        run: |
          echo "🔄 Converting YAML rules to Sing-box format..."
          mkdir -p sing-rule
          cd converter && go build -o meta-converter .
          echo "✅ Meta-converter built successfully"
          
          echo "🎯 Starting conversion process..."
          ./meta-converter clash -f ../community/data_source -o ../sing-rule -t sing-box
          
          echo "📝 Processing converted files..."
          cd ../sing-rule
          processed_count=0
          for dir in */; do
            dir_name=$(basename "$dir")
            if [[ -f "$dir/classical.json" && -f "$dir/classical.srs" ]]; then
              original_yaml=$(find ../community/data_source -type f -iname "${dir_name}.yaml" -print -quit)
              if [[ -n "$original_yaml" ]]; then
                original_name=$(basename "$original_yaml" .yaml)
                mv "$dir/classical.json" "${original_name}.json"
                mv "$dir/classical.srs" "${original_name}.srs"
                echo "✅ Processed: ${original_name} (.json + .srs)"
              else
                mv "$dir/classical.json" "${dir_name}.json"
                mv "$dir/classical.srs" "${dir_name}.srs"
                echo "✅ Processed: ${dir_name} (.json + .srs)"
              fi
              processed_count=$((processed_count + 1))
            fi
            rm -rf "$dir"
          done
          
          echo "🎉 Conversion complete:"
          echo "   📄 Processed rules: $processed_count"
          echo "   📊 Generated files: $(ls *.json *.srs 2>/dev/null | wc -l)"

      - name: Create lite rules with cleanup
        run: |
          echo "🔧 Creating Lite rules (IP-CIDR + DOMAIN only)..."
          mkdir -p sing-rule-lite
          sudo apt-get update && sudo apt-get install -y jq
          
          echo "📝 Step 1: Creating lite JSON rules..."
          lite_json_count=0
          for json_file in sing-rule/*.json; do
            if [[ -f "$json_file" ]]; then
              filename=$(basename "$json_file" .json)
              echo "   Processing: $filename"
              jq '{version: .version, rules: [.rules[] | with_entries(select(.key == "ip_cidr" or .key == "domain")) | select(keys | length > 0)]}' "$json_file" > "sing-rule-lite/${filename}.json"
              rule_count=$(jq '.rules | if . == null then 0 else length end' "sing-rule-lite/${filename}.json")
              if [[ "$rule_count" -eq 0 ]]; then
                echo "   ❌ Removed empty: $filename (0 rules)"
                rm "sing-rule-lite/${filename}.json"
              else
                echo "   ✅ Created: $filename ($rule_count rules)"
                lite_json_count=$((lite_json_count + 1))
              fi
            fi
          done
          
          echo "📝 Step 2: Preparing YAML sources for SRS conversion..."
          mkdir -p lite-yaml-source
          yaml_count=0
          for yaml_file in community/data_source/*.yaml; do
            if [[ -f "$yaml_file" ]]; then
              filename=$(basename "$yaml_file" .yaml)
              {
                echo "payload:"
                grep -E "^\s*-\s*DOMAIN," "$yaml_file" | sed 's/^[[:space:]]*/  /' || true
                grep -E "^\s*-\s*IP-CIDR," "$yaml_file" | sed 's/^[[:space:]]*/  /' || true
              } > "lite-yaml-source/${filename}.yaml"
              rule_count=$(grep -c "^\s*-\s*" "lite-yaml-source/${filename}.yaml" 2>/dev/null || echo "0")
              if [[ "$rule_count" -eq 0 ]]; then
                echo "payload:" > "lite-yaml-source/${filename}.yaml"
              fi
              yaml_count=$((yaml_count + 1))
            fi
          done
          
          echo "📝 Step 3: Converting lite YAML to SRS..."
          cd converter
          if ./meta-converter clash -f ../lite-yaml-source -o ../sing-rule-lite-converted -t sing-box 2>&1; then
            echo "✅ SRS conversion successful"
            cd ../sing-rule-lite-converted
            srs_count=0
            for dir in */; do
              if [[ -d "$dir" ]]; then
                dir_name=$(basename "$dir")
                for lite_json in ../sing-rule-lite/*.json; do
                  if [[ -f "$lite_json" ]]; then
                    lite_basename=$(basename "$lite_json" .json)
                    if [[ "${lite_basename,,}" == "${dir_name,,}" ]]; then
                      original_basename=$(basename "$lite_json" .json)
                      if [[ -f "$dir/classical.json" && -f "$dir/classical.srs" ]]; then
                        mv "$dir/classical.json" "../sing-rule-lite/${original_basename}.json"
                        mv "$dir/classical.srs" "../sing-rule-lite/${original_basename}.srs"
                        echo "   ✅ SRS created: $original_basename"
                        srs_count=$((srs_count + 1))
                      elif [[ -f "$dir/classical.json" ]]; then
                        mv "$dir/classical.json" "../sing-rule-lite/${original_basename}.json"
                      fi
                      break
                    fi
                  fi
                done
              fi
            done
            cd ..
          else
            echo "⚠️ SRS conversion failed, continuing with JSON only"
          fi
          rm -rf lite-yaml-source sing-rule-lite-converted
          
          echo "📝 Step 4: Final cleanup - removing empty files..."
          cleaned_count=0
          for lite_file in sing-rule-lite/*.json; do
            if [[ -f "$lite_file" ]]; then
              rule_count=$(jq '.rules | if . == null then 0 else length end' "$lite_file" 2>/dev/null || echo "0")
              if [[ "$rule_count" -eq 0 ]]; then
                echo "   🗑️ Cleaned: $(basename "$lite_file") (empty)"
                rm "$lite_file"
                srs_file="${lite_file%.json}.srs"
                [[ -f "$srs_file" ]] && rm "$srs_file"
                cleaned_count=$((cleaned_count + 1))
              fi
            fi
          done
          
          echo "🎉 Lite rules creation complete:"
          echo "   📄 Lite JSON files: $lite_json_count"
          echo "   📄 YAML sources: $yaml_count"
          echo "   📄 SRS files: $srs_count"
          echo "   🗑️ Cleaned empty: $cleaned_count"
          echo "   📊 Final count: $(ls sing-rule-lite/*.json sing-rule-lite/*.srs 2>/dev/null | wc -l) files"

      - name: Upload sing-box artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sing-box-rules
          path: |
            sing-rule/
            sing-rule-lite/

  # Job 2: Generate Mihomo Rules (Parallel)
  mihomo-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
          echo "CHINA_DOMAINS_URL=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Domain.txt" >> $GITHUB_ENV
          echo "GOOGLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "APPLE_DOMAINS_URL=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "CUSTOM_PROXY=https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/geolocation-!cn.txt" >> $GITHUB_ENV

      - name: Checkout domain lists for mihomo
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Checkout gfwlist tool
        uses: actions/checkout@v4
        with:
          repository: cokebar/gfwlist2dnsmasq
          path: gfwlist2dnsmasq

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: ./custom/go.sum

      - name: Process domain lists
        run: |
          echo "🛡️ GENERATING MIHOMO RULES"
          
          echo "📥 Step 1: Downloading GFWList..."
          cd gfwlist2dnsmasq && chmod +x ./gfwlist2dnsmasq.sh && ./gfwlist2dnsmasq.sh -l -o ./temp-gfwlist.txt && cd ..
          gfw_count=$(wc -l < ./gfwlist2dnsmasq/temp-gfwlist.txt)
          echo "✅ GFWList downloaded: $gfw_count domains"
          
          echo "📥 Step 2: Downloading China domains..."
          curl -sSL ${CHINA_DOMAINS_URL} | sed '/^\s*#/d' | sed '/^[^\.]/ s/^/full:/' | sed 's/^\.\([^.]*\)/\1/' > temp-direct.txt
          china_count=$(wc -l < temp-direct.txt)
          echo "✅ China domains downloaded: $china_count domains"
          
          echo "📥 Step 3: Processing proxy domains..."
          cat ./gfwlist2dnsmasq/temp-gfwlist.txt | perl -ne '/^((?=^.{3,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})+)/ && print "$1\n"' > temp-proxy.txt
          proxy_initial=$(wc -l < temp-proxy.txt)
          
          echo "📥 Step 4: Adding Google domains..."
          curl -sSL $GOOGLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          proxy_google=$(wc -l < temp-proxy.txt)
          google_added=$((proxy_google - proxy_initial))
          
          echo "📥 Step 5: Adding Apple domains..."
          curl -sSL $APPLE_DOMAINS_URL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' >> temp-proxy.txt
          proxy_apple=$(wc -l < temp-proxy.txt)
          apple_added=$((proxy_apple - proxy_google))
          
          echo "📥 Step 6: Adding custom proxy domains..."
          curl -sSL ${CUSTOM_PROXY} | grep -Ev ":@cn" | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> temp-proxy.txt
          proxy_final=$(wc -l < temp-proxy.txt)
          custom_added=$((proxy_final - proxy_apple))
          
          echo "📊 Domain collection summary:"
          echo "   📋 GFWList: $gfw_count domains"
          echo "   🇨🇳 China: $china_count domains" 
          echo "   🔍 Google: +$google_added domains"
          echo "   🍎 Apple: +$apple_added domains"
          echo "   🌐 Custom: +$custom_added domains"
          echo "   📈 Total Direct: $china_count"
          echo "   📈 Total Proxy: $proxy_final"

      - name: Remove redundant domains
        run: |
          echo "🔧 Starting domain deduplication (this may take 2-3 minutes)..."
          
          cat > remove_redundant.py << 'EOF'
          import sys
          import time
          print(f"🐍 Python deduplication script started...")
          start_time = time.time()
          
          domains = set()
          with open(sys.argv[1], 'r') as f:
              for line in f:
                  domain = line.strip()
                  if domain: domains.add(domain)
          
          print(f"📊 Loaded {len(domains)} unique domains")
          print("🔍 Searching for redundant subdomains...")
          
          redundant = set()
          domain_list = sorted(domains)
          total = len(domain_list)
          processed = 0
          
          for i, domain in enumerate(domain_list):
              if i % 1000 == 0:
                  progress = (i / total) * 100
                  print(f"   Progress: {progress:.1f}% ({i}/{total})")
              
              for j, other_domain in enumerate(domain_list):
                  if i != j and domain.endswith('.' + other_domain):
                      redundant.add(domain)
              processed += 1
          
          final_domains = domains - redundant
          with open(sys.argv[2], 'w') as f:
              for domain in sorted(final_domains):
                  f.write(domain + '\n')
          
          elapsed = time.time() - start_time
          print(f"✅ Deduplication complete in {elapsed:.1f}s")
          print(f"   Original: {len(domains)} domains")
          print(f"   Redundant: {len(redundant)} domains")
          print(f"   Final: {len(final_domains)} domains")
          EOF
          
          echo "📝 Step 1: Sorting and initial dedup..."
          cat temp-proxy.txt | sort --ignore-case -u > proxy-list-raw.txt
          cat temp-direct.txt | sort --ignore-case -u > direct-list-raw.txt
          proxy_raw=$(wc -l < proxy-list-raw.txt)
          direct_raw=$(wc -l < direct-list-raw.txt)
          echo "   Proxy (after sort): $proxy_raw domains"
          echo "   Direct (after sort): $direct_raw domains"
          
          echo "📝 Step 2: Advanced redundancy removal for proxy domains..."
          python remove_redundant.py proxy-list-raw.txt proxy-list-clean.txt
          proxy_clean=$(wc -l < proxy-list-clean.txt)
          
          echo "📝 Step 3: Advanced redundancy removal for direct domains..."
          python remove_redundant.py direct-list-raw.txt direct-list-clean.txt
          direct_clean=$(wc -l < direct-list-clean.txt)
          
          echo "📝 Step 4: Final processing and validation..."
          cat proxy-list-clean.txt | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' | perl -ne 'print if not /\.cn$/' > ./community/data/geolocation-!cn
          cat direct-list-clean.txt | grep -v google | grep -v manhua | grep -v ooklaserver | grep -v "acg.rip" | sort --ignore-case -u | perl -ne '/^((?=^.{1,255})[a-zA-Z0-9][-_a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-_a-zA-Z0-9]{0,62})*)/ && print "$1\n"' > ./community/data/cn
          
          proxy_final=$(wc -l < ./community/data/geolocation-!cn)
          direct_final=$(wc -l < ./community/data/cn)
          
          echo "🎉 Deduplication summary:"
          echo "   🔍 Proxy: $proxy_raw → $proxy_clean → $proxy_final (final)"
          echo "   🇨🇳 Direct: $direct_raw → $direct_clean → $direct_final (final)"
          echo "   💾 Proxy saved: $((proxy_raw - proxy_final)) domains"
          echo "   💾 Direct saved: $((direct_raw - direct_final)) domains"

      - name: Build and convert geosite
        run: |
          echo "🏗️ Building geosite database..."
          cd custom && echo ipleak.net >> ../community/data/geolocation-!cn && echo browserleaks.org >> ../community/data/geolocation-!cn
          
          echo "📝 Step 1: Building geosite.dat..."
          go run ./ --datapath=../community/data
          geosite_size=$(du -h publish/geosite.dat | cut -f1)
          echo "✅ geosite.dat built: $geosite_size"
          
          echo "📝 Step 2: Building meta-converter..."
          cd ../converter && go build -o meta-converter .
          echo "✅ meta-converter built"
          
          echo "📝 Step 3: Converting geosite to meta rules..."
          mkdir -p ../meta-rule
          ./meta-converter geosite -f ../custom/publish/geosite.dat -o ../meta-rule-temp
          
          echo "📝 Step 4: Processing converted rules..."
          yaml_count=0
          list_count=0
          for yaml_dir in ../meta-rule-temp/*/; do
            if [[ -d "$yaml_dir" ]]; then
              dir_name=$(basename "$yaml_dir")
              if [[ -f "$yaml_dir/classical.yaml" ]]; then
                mv "$yaml_dir/classical.yaml" "../meta-rule/${dir_name}.yaml"
                yaml_count=$((yaml_count + 1))
                
                # Create LIST format
                tail -n +2 "../meta-rule/${dir_name}.yaml" | sed 's/^[[:space:]]*-\s*//g' | grep -v '^$' > "../meta-rule/${dir_name}.list"
                list_count=$((list_count + 1))
                
                rule_count=$(tail -n +2 "../meta-rule/${dir_name}.yaml" | wc -l)
                echo "   ✅ $dir_name: $rule_count rules (YAML + LIST)"
              fi
            fi
          done
          rm -rf ../meta-rule-temp
          
          echo "🎉 Geosite conversion complete:"
          echo "   📄 YAML files: $yaml_count"
          echo "   📄 LIST files: $list_count"
          echo "   📊 Total files: $(ls ../meta-rule/*.yaml ../meta-rule/*.list 2>/dev/null | wc -l)"

      - name: Upload mihomo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mihomo-rules
          path: meta-rule/

  # Job 3: Publish (Sequential - waits for both parallel jobs)
  publish:
    runs-on: ubuntu-latest
    needs: [sing-box-rules, mihomo-rules]
    steps:
      - name: Set variables
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Download sing-box artifacts
        uses: actions/download-artifact@v4
        with:
          name: sing-box-rules
          path: ./

      - name: Download mihomo artifacts
        uses: actions/download-artifact@v4
        with:
          name: mihomo-rules
          path: ./

      - name: Prepare publish artifacts
        run: |
          echo "📦 PREPARING UNIFIED PUBLISH"
          mkdir -p publish
          cp -r sing-rule publish/sing-rule
          cp -r sing-rule-lite publish/sing-rule-lite
          cp -r meta-rule publish/meta-rule
          echo "=== Artifact Summary ==="
          echo "Sing-box rules: $(find publish/sing-rule -type f | wc -l) files"
          echo "Sing-box lite: $(find publish/sing-rule-lite -type f | wc -l) files"
          echo "Mihomo rules: $(find publish/meta-rule -type f | wc -l) files"

      - name: Create ZIP archives
        run: |
          mkdir -p release-assets
          echo "📦 Creating ZIP packages"
          
          # Sing-box packages
          cd sing-rule
          if ls *.srs 1> /dev/null 2>&1; then
            zip -r ../release-assets/sing-rules-srs.zip *.srs
            echo "✅ sing-rules-srs.zip ($(ls *.srs | wc -l) files)"
          fi
          if ls *.json 1> /dev/null 2>&1; then
            zip -r ../release-assets/sing-rules-json.zip *.json
            echo "✅ sing-rules-json.zip ($(ls *.json | wc -l) files)"
          fi
          cd ../sing-rule-lite
          if ls *.srs 1> /dev/null 2>&1; then
            zip -r ../release-assets/sing-rules-lite-srs.zip *.srs
            echo "✅ sing-rules-lite-srs.zip ($(ls *.srs | wc -l) files)"
          fi
          if ls *.json 1> /dev/null 2>&1; then
            zip -r ../release-assets/sing-rules-lite-json.zip *.json
            echo "✅ sing-rules-lite-json.zip ($(ls *.json | wc -l) files)"
          fi
          
          # Mihomo packages  
          cd ../meta-rule
          if ls *.yaml 1> /dev/null 2>&1; then
            zip -r ../release-assets/meta-rules-yaml.zip *.yaml
            echo "✅ meta-rules-yaml.zip ($(ls *.yaml | wc -l) files)"
          fi
          if ls *.list 1> /dev/null 2>&1; then
            zip -r ../release-assets/meta-rules-list.zip *.list
            echo "✅ meta-rules-list.zip ($(ls *.list | wc -l) files)"
          fi
          if ls *.mrs 1> /dev/null 2>&1; then
            zip -r ../release-assets/meta-rules-mrs.zip *.mrs
            echo "✅ meta-rules-mrs.zip ($(ls *.mrs | wc -l) files)"
          fi
          cd ..

      - name: Create Unified GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.TAG_NAME }}
          name: 🚀 Parallel Build Release ${{ env.BUILDTIME }}
          body: |
            ## ⚡ 并行构建版本 (Ultra Fast)
            
            ### 🎯 Sing-box 规则
            - `sing-rules-srs.zip` - 完整版 (.srs 二进制)
            - `sing-rules-json.zip` - 完整版 (.json 源码)
            - `sing-rules-lite-srs.zip` - 精简版 (.srs 二进制) - IP-CIDR + DOMAIN only
            - `sing-rules-lite-json.zip` - 精简版 (.json 源码) - IP-CIDR + DOMAIN only
            
            ### 🛡️ Mihomo 规则
            - `meta-rules-yaml.zip` - YAML 格式 (默认)
            - `meta-rules-list.zip` - LIST 格式 (3x 更快)
            - `meta-rules-mrs.zip` - MRS 格式 (实验性)
            
            ### ⚡ 并行构建优势
            - 🚀 **2x 构建速度**: Sing-box 和 Mihomo 并行生成
            - 🎯 **资源隔离**: 每个Job独立运行，互不干扰
            - 📊 **清晰日志**: 分Job显示，问题定位更容易
            
            ### 📊 数据源
            - **Sing-box**: iOS rule script (~15k 规则)
            - **Mihomo**: 多源整合 GFWList + China domains (~30k 规则)
            
            ### 🔗 CDN 访问
            - GitHub: `https://raw.githubusercontent.com/proother/rule_singbox_mihomo/refs/heads/release/`
            - jsDelivr: `https://cdn.jsdelivr.net/gh/proother/rule_singbox_mihomo@release/`
          files: |
            release-assets/*.zip

      - name: Push to release branch
        run: |
          echo "🌳 PUSHING TO BRANCHES"
          cd publish && git init && git config --local user.name "github-actions[bot]" && git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release && git add . && git commit -m "🚀 Parallel Build Released on ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Push to specialized branches
        run: |
          # Sing-box branch
          cd sing-rule && git init && git config --local user.name "github-actions[bot]" && git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b sing && git add . && git commit -m "🎯 Sing-box Rules (Parallel Build) ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin sing
          
          # Mihomo branch
          cd ../meta-rule && git init && git config --local user.name "github-actions[bot]" && git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b meta && git add . && git commit -m "🛡️ Mihomo Rules (Parallel Build) ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin meta

      - name: Purge jsDelivr CDN
        run: |
          echo "🚀 Purging jsDelivr CDN"
          cd publish
          for file in $(find . -name "*.srs" -o -name "*.json" -o -name "*.yaml" -o -name "*.list" | head -30); do
            file_path=$(echo "$file" | sed 's|^\./||')
            curl -s "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file_path}" || true
          done
          echo "✅ CDN cache purged"
