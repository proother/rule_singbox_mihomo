name: Convert Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #
      # 1. Set variables
      #
      - name: Set variables
        shell: bash
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

      #
      # 2. Check out repositories
      #
      - name: Checkout blackmatrix7/ios_rule_script
        uses: actions/checkout@v4
        with:
          repository: blackmatrix7/ios_rule_script
          path: ios_rule_script

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter
          
      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      #
      # 3. Setup Go
      #
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: ./custom/go.sum

      #
      # 4. Copy .yaml files
      #
      - name: Add data for sing-box (copy yaml)
        run: |
          echo "=== Gathering all .yaml files ==="
          mkdir -p community/sing-data
          cp ios_rule_script/rule/Clash/*/*.yaml community/sing-data/

          ls -al community/sing-data
          echo "All .yaml files have been copied"

      #
      # 5. Convert YAML to sing rules
      #
      - name: Convert YAML to sing rules
        run: |
          echo "=== Converting .yaml to sing rules ==="
          mkdir -p sing-rule
          cd converter
          # The 'clash' subcommand looks for *.yaml in the -i folder,
          # then outputs everything to -o with type 'sing-box'
          go run . clash -i ../community/sing-data -o ../sing-rule -t sing-box

      # 4. Add data (copy & transform .list files)
      #
      - name: Add data for meta (copy list)
        run: |
          echo "=== Gathering all .list files ==="
          mkdir -p community/meta-data
          cp ios_rule_script/rule/Clash/*/*.list community/meta-data/

          touch community/meta-data/geolocation-!cn
          touch community/meta-data/geolocation-cn
          touch community/meta-data/tld-!cn
          touch community/meta-data/tld-cn
          touch community/meta-data/private
          ls -al community/meta-data
      #
      # 5. Build geosite.dat
      #
      - name: Build geosite.dat file
        run: |
          echo "=== Building geosite.dat ==="
          cd custom
          echo ipleak.net >> ../community/meta-data/geolocation-!cn
          echo browserleaks.org >> ../community/meta-data/geolocation-!cn
          go run ./ --datapath=../community/meta-data
          cp ./publish/geosite.dat ../community/meta-data/geosite.dat
      #
      # 6. Convert YAML to meta rules
      #
      - name: Convert YAML to meta rules
        run: |
          echo "=== Converting .yaml to meta rules ==="
          mkdir -p meta-rule
          cd converter
          # Now with type 'meta' (assuming the converter supports that)
          go run . geosite -f ../community/meta-data/ -o ../meta-rule/ -t clash
          echo "All conversions complete."

      #
      # 7. Gather artifacts into publish folder
      #
      - name: Prepare publish artifacts
        run: |
          echo "=== Collecting final artifacts into ./publish/ ==="
          mkdir -p publish
          
          # Move sing-rule and meta-rule into publish/
          cp -r sing-rule publish/sing-rule
          cp -r meta-rule publish/meta-rule
          ls -R publish

      #
      # 8. Commit & push to 'release' branch
      #
      - name: Commit and push assets to 'release'
        run: |
          echo "=== Committing ./publish/ to branch 'release' ==="
          cd publish
          git init
          git config user.name "github-actions[bot]"
          git config user.email "idontknow+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "Assets from ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      #
      # 9. Purge jsdelivr CDN (optional)
      #
      - name: Purge jsdelivr CDN
        run: |
          echo "=== Purging jsDelivr cache for files in ./publish/ ==="
          for file in $(find publish -type f); do
            filename=$(basename "$file")
            echo "Purging $filename..."
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${filename}"
          done

      - name: Done
        run: echo "All steps completed!"
