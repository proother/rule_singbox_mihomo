name: Convert Workflow

on:
  # Trigger manually or on push to main
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #
      # 1) Checkout repositories
      #
      - name: Checkout blackmatrix7/ios_rule_script
        uses: actions/checkout@v4
        with:
          repository: blackmatrix7/ios_rule_script
          path: ios_rule_script

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter

      #
      # 2) Add data for `meta` (using all .list files from blackmatrix7)
      #
      - name: Add data for meta
        run: |
          echo "=== Gathering all .list files for meta ==="
          mkdir -p community/data
          # Option A: Copy them directly into community/data (if the converter can handle multiple .list inputs from a directory).
          cp ios_rule_script/rule/Clash/*/*.list community/data/

          # Option B (if needed): Combine or transform each .list 
          # cat ios_rule_script/rule/Clash/*/*.list > community/data/all_merged_rules.list
          # Possibly add your own sed/awk transformations, etc.

          echo "List files copied. Ready to build geosite.dat."

      #
      # 3) Build geosite.dat file
      #
      - name: Build geosite.dat file
        run: |
          echo "=== Building geosite.dat from community/data ==="
          cd converter
          # Example usage: If your converter supports `--datapath` for multiple .list files in a directory:
          go run . clash \
            --datapath ../community/data \
            --output ../custom/publish/geosite.dat

          # Alternatively, if your converter uses a different CLI:
          # go run . clash -f ../community/data/all_merged_rules.list -o ../custom/publish/geosite.dat

      #
      # 4) Build db and metadb file (no geoip)
      #
      - name: Build db and metadb file
        env:
          NO_SKIP: true
        run: |
          echo "=== Building geosite.db and others (no geoip) ==="
          # 1) Install geo tool
          go install -trimpath -ldflags="-s -w -buildid=" github.com/metacubex/geo/cmd/geo@master

          # 2) Convert site to .db for v2ray->sing
          #    (This uses the newly built geosite.dat)
          geo convert site \
            -i v2ray \
            -o sing \
            -f geosite.db \
            ./custom/publish/geosite.dat

          echo "DB & metadb build complete (without geoip)."

      #
      # 5) Convert geo to sing-rule-set
      #
      - name: Convert geo to sing-rule-set
        env:
          NO_SKIP: true
        run: |
          echo "=== Converting geosite.dat to sing-rule-set ==="
          mkdir -p sing-rule/geo/geosite
          cd convert
          go run ./ geosite \
            -f ../custom/publish/geosite.dat \
            -o ../sing-rule/geo/geosite \
            -t sing-box

      #
      # 6) Convert geo to meta-rule-set
      #
      - name: Convert geo to meta-rule-set
        env:
          NO_SKIP: true
        run: |
          echo "=== Converting geosite.dat to meta-rule-set ==="
          mkdir -p meta-rule/geo/geosite
          cd convert
          go run ./ geosite \
            -f ../custom/publish/geosite.dat \
            -o ../meta-rule/geo/geosite

      #
      # (Optional) Upload or publish artifacts, etc.
      #
      - name: Done
        run: echo "All steps completed!"
