name: Convert Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #
      # 1. Set variables
      #
      - name: Set variables
        shell: bash
        run: |
          echo "GOAMD64=v3" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

      #
      # 2. Check out repositories
      #
      - name: Checkout blackmatrix7/ios_rule_script
        uses: actions/checkout@v4
        with:
          repository: blackmatrix7/ios_rule_script
          path: ios_rule_script

      - name: Checkout MetaCubeX/meta-rules-converter
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/meta-rules-converter
          path: converter

      - name: Checkout Loyalsoldier/domain-list-custom
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/domain-list-custom
          path: custom

      #
      # 3. Setup Go
      #
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: ./custom/go.sum

      #
      # 4. Copy files to data source directory
      #
      - name: Copy files to data source directory
        run: |
          echo "=== Copying necessary files to data source directory ==="
          mkdir -p community/data_source

          # Copy .yaml files
          echo "=== Copying .yaml files ==="
          for dir in $(find ios_rule_script/rule/Clash -type d); do
            if ls "$dir"/*_Classical.yaml 2>/dev/null; then
              find "$dir" -type f -name '*_Classical.yaml' ! -name '*_No_Resolve.yaml' -exec cp {} community/data_source/ \;
            else
              dir_name=$(basename "$dir")
              find "$dir" -type f -name "${dir_name}.yaml" ! -name '*_No_Resolve.yaml' -exec cp {} community/data_source/ \;
            fi
          done

          echo "=== Files in community/data_source ==="
          ls -al community/data_source

      #
      # 5. Convert YAML to sing rules (Updated Step)
      #
      - name: Convert YAML to sing rules
        run: |
          echo "=== Converting .yaml to sing rules ==="
          mkdir -p sing-rule
          cd converter
          # Build the converter
          go build -o meta-converter .
          # Use the built binary
          ./meta-converter clash -f ../community/data_source -o ../sing-rule -t sing-box
          cd ../sing-rule

          # Move files from subdirectories to the root of sing-rule
          for dir in */; do
            dir_name=$(basename "$dir")
            if [[ -f "$dir/classical.json" && -f "$dir/classical.srs" ]]; then
              # Find the original YAML file in community/data_source
              original_yaml=$(find ../community/data_source -type f -iname "${dir_name}.yaml" -print -quit)

              if [[ -n "$original_yaml" ]]; then
                # Extract the original filename (without extension)
                original_name=$(basename "$original_yaml" .yaml)

                # Move and rename the JSON/SRS files to match the original filename
                mv "$dir/classical.json" "${original_name}.json"
                mv "$dir/classical.srs" "${original_name}.srs"
              else
                # Fallback to directory name if original YAML is not found
                mv "$dir/classical.json" "${dir_name}.json"
                mv "$dir/classical.srs" "${dir_name}.srs"
              fi
            fi
            # Remove the empty subdirectory
            rm -rf "$dir"
          done

          echo "=== Final files in sing-rule ==="
          ls -al

      #
      # 6. Process YAML files for meta-rule
      #
      - name: Process YAML files for meta-rule
        run: |
          echo "=== Processing YAML files for meta-rule ==="
          mkdir -p meta-rule
          cp community/data_source/*.yaml meta-rule/
          
          echo "=== Removing comments and empty lines from YAML files ==="
          for yaml_file in meta-rule/*.yaml; do
            # Remove comments (lines starting with '#') and empty lines
            sed '/^#/d; /^$/d' "$yaml_file" > tmp && mv tmp "$yaml_file"
          done
          
          echo "=== Converting YAML to LIST files ==="
          for yaml_file in meta-rule/*.yaml; do
            list_file="${yaml_file%.yaml}.list"
            # Skip the first line, remove leading '- ' prefix, and eliminate empty lines
            tail -n +2 "$yaml_file" | sed 's/^[[:space:]]*-\s*//g' | grep -v '^$' > "$list_file"
          done
          
          echo "=== Final files in meta-rule ==="
          ls -al meta-rule

      #
      # 7. Gather artifacts into publish folder
      #
      - name: Prepare publish artifacts
        run: |
          echo "=== Collecting final artifacts into ./publish/ ==="
          mkdir -p publish

          # Move sing-rule and meta-rule into publish/
          cp -r sing-rule publish/sing-rule
          cp -r meta-rule publish/meta-rule
          echo "=== sing-rule file count: $(find sing-rule -type f | wc -l) ==="
          echo "=== meta-rule file count: $(find meta-rule -type f | wc -l) ==="
          ls -R publish

      #
      # 7.5. Create ZIP archives
      #
      - name: Create ZIP archives
        run: |
          echo "=== Creating ZIP archives ==="
          mkdir -p release-assets
          
          # Sing-box rules
          echo "=== Zipping sing-box rules ==="
          cd sing-rule
          if ls *.srs 1> /dev/null 2>&1; then
            zip ../release-assets/sing-rules-srs.zip *.srs
            echo "Created sing-rules-srs.zip"
          fi
          if ls *.json 1> /dev/null 2>&1; then
            zip ../release-assets/sing-rules-json.zip *.json
            echo "Created sing-rules-json.zip"
          fi
          cd ..
          
          # Meta rules
          echo "=== Zipping meta rules ==="
          cd meta-rule
          if ls *.list 1> /dev/null 2>&1; then
            zip ../release-assets/meta-rules-list.zip *.list
            echo "Created meta-rules-list.zip"
          fi
          if ls *.yaml 1> /dev/null 2>&1; then
            zip ../release-assets/meta-rules-yaml.zip *.yaml
            echo "Created meta-rules-yaml.zip"
          fi
          cd ..
          
          echo "=== Release assets created ==="
          ls -al release-assets/

      #
      # 8. Create GitHub Release
      #
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.BUILDTIME }}
          name: Release ${{ env.BUILDTIME }}
          body: |
            ## ðŸ“¦ Rule Packages
            
            ### Sing-box Rules
            - `sing-rules-srs.zip` - Sing-box binary rule files (.srs)
            - `sing-rules-json.zip` - Sing-box JSON rule files (.json)
            
            ### Meta Rules
            - `meta-rules-list.zip` - Meta list rule files (.list)
            - `meta-rules-yaml.zip` - Meta YAML rule files (.yaml)
            
            ### Build Information
            - Build Time: ${{ env.BUILDTIME }} (Asia/Shanghai)
            - Workflow Run: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Data Sources
            - Rules from [blackmatrix7/ios_rule_script](https://github.com/blackmatrix7/ios_rule_script)
            - Converter by [MetaCubeX/meta-rules-converter](https://github.com/MetaCubeX/meta-rules-converter)
          files: |
            release-assets/*
          fail_on_unmatched_files: false
          generate_release_notes: false

      #
      # 8.5. Also push to 'release' branch for backward compatibility
      #
      - name: Push to release branch
        run: |
          echo "=== Pushing to branch 'release' for backward compatibility ==="
          cd publish
          git init
          git config user.name "github-actions[bot]"
          git config user.email "idontknow+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "Assets from ${{ env.BUILDTIME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      #
      # 9. Purge jsdelivr CDN (optional)
      #
      - name: Purge jsdelivr CDN
        run: |
          echo "=== Purging jsDelivr cache for files in ./publish/ ==="
          for file in $(find publish -type f); do
            filename=$(basename "$file")
            echo "Purging $filename..."
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${filename}"
          done

      #
      # 10. Victory! (optional)
      #
      - name: Done
        run: echo "All steps completed!"
